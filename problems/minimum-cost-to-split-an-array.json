{"problemName":"minimum-cost-to-split-an-array","language":"cpp","code":"class Solution {\npublic:\n    int solve(int i,vector<int>&nums,int &k,int n,vector<int>&dp){\n        if(i >= n) return 0;\n        if(dp[i] != -1) return dp[i];\n        vector<int>mp(n,0);\n        int cnt = 0;\n        int ans = INT_MAX;\n        for(int j = i;j < n;j++){\n            mp[nums[j]]++;\n            if(mp[nums[j]] == 2) cnt += 2;\n            else if(mp[nums[j]] > 2) cnt++;\n            ans = min(ans,solve(j+1,nums,k,n,dp)+cnt+k);\n        }\n        return dp[i] = ans;\n    }\n    int minCost(vector<int>& nums, int k) {\n        vector<int>dp(nums.size(),-1);\n        return solve(0,nums,k,nums.size(),dp);\n    }\n};"}