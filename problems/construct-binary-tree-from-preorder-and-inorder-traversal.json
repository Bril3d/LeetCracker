{"problemName":"construct-binary-tree-from-preorder-and-inorder-traversal","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* helper(vector<int>& preorder, vector<int>& inorder, int prestart, int preend, int instart, int inend, unordered_map<int,int> &umap){\n        if(prestart > preend || instart > inend) return NULL;\n        \n        TreeNode *root = new TreeNode(preorder[prestart]);\n        int ind = umap[preorder[prestart]];\n        int left = ind - instart;\n        root->left = helper(preorder, inorder, prestart + 1, prestart + left, instart, ind - 1, umap);\n        root->right = helper(preorder, inorder, prestart + left + 1, preend, ind + 1, inend, umap);\n        return root;       \n    }\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        unordered_map<int,int> umap;\n        int ind = 0;\n        for(auto i : inorder)umap[i] = ind++;\n        \n        return helper(preorder, inorder, 0, preorder.size() - 1, 0, inorder.size() - 1, umap);\n    }\n};"}