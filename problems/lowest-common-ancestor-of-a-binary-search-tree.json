{"problemName":"lowest-common-ancestor-of-a-binary-search-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        TreeNode * curr = root;\n        while(curr != NULL){\n            if(p->val < curr->val && q->val < curr->val){\n                curr = curr->left;\n            }else if(p->val > curr->val && q->val > curr->val){\n                curr = curr->right;\n            }else{\n                return curr;\n            }\n        }\n        return curr;\n    }\n};"}