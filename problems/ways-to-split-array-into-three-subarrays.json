{"problemName":"ways-to-split-array-into-three-subarrays","language":"cpp","code":"typedef long long int ll;\nconst int MOD = 1e9 + 7;\nclass Solution {\npublic:\n    int waysToSplit(vector<int>& nums) {\n        vector<ll> pre(nums.begin(), nums.end());\n        int n = nums.size();\n        for(int i = 1; i < n; i++){\n            pre[i] += pre[i - 1];\n        } \n        ll ans = 0;\n        for(int i = 0; i < n; i++){\n            if((pre[n - 1] - pre[i]) < 2 * pre[i])break;\n            int start = lower_bound(pre.begin() + i + 1, pre.end() - 1, 2 * pre[i]) - pre.begin();\n            int end = upper_bound(pre.begin() + i + 1, pre.end() - 1, (pre[n - 1] + pre[i])/2) - pre.begin();\n            if(start <= end){\n                ans = (ans + (end - start))%MOD;\n            }\n            // printf(\"%d %d %d\\n\", i, start, end);\n        }\n        return ans%MOD;\n    }\n};"}