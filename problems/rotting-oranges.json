{"problemName":"rotting-oranges","language":"cpp","code":"class Solution {\npublic:\n    int orangesRotting(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        \n        queue<pair<int,int>> q;        \n        //\n        int cnt = 0;\n        for(int i =0 ;i<n;i++){\n            for(int j=0;j<m;j++){\n                if(grid[i][j] == 2){\n                    q.push({i,j});\n                }else if(grid[i][j] == 1){\n                    cnt++;\n                }\n            }\n        }\n        \n        int time = -1;\n        while(!q.empty()){\n            int N = q.size();\n            for(int i = 0; i<N;i++){\n                auto front = q.front();\n                q.pop();\n                int x = front.first;\n                int y = front.second;\n                \n                int u = x - 1;\n                int v = y;\n                if(u >= 0 && u < n && v >= 0 && v < m  && grid[u][v] == 1){\n                    cnt--;\n                    grid[u][v] = 2;\n                    q.push({u, v});\n                }\n                \n                u = x + 1;\n                v = y;\n                if(u >= 0 && u < n && v >= 0 && v < m  && grid[u][v] == 1){\n                    q.push({u, v});\n                    grid[u][v] = 2;\n                    cnt--;\n                }\n                \n                u = x;\n                v = y - 1;\n                if(u >= 0 && u < n && v >= 0 && v < m  && grid[u][v] == 1){\n                    q.push({u, v});\n                    grid[u][v] = 2;\n                    cnt--;\n                }\n                \n                u = x;\n                v = y + 1;\n                if(u >= 0 && u < n && v >= 0 && v < m  && grid[u][v] == 1){\n                    q.push({u, v});\n                    grid[u][v] = 2;\n                    cnt--;\n                }\n            }\n            time++;\n        }\n        if(cnt > 0)return -1;\n        return max(0,time);\n    }\n};"}