{"problemName":"minimum-lines-to-represent-a-line-chart","language":"cpp","code":"class Solution {\npublic:\n    long double findAngle(long double x1,long double y1,long double x2,long double y2){\n        long double  angle = atan2(y1 - y2, x1 - x2);\n        // cout<<x1<<\",\"<<y1<<\",\"<<x2<<\",\"<<y2<<\"->\"<<angle<<endl;\n        return angle;\n    }\n    static bool cmp(pair<int,int> &x,pair<int,int> &y){\n        return x.first<y.first;\n    }\n    int minimumLines(vector<vector<int>>& sp) {\n        if(sp.size()==1) return 0;\n        vector<pair<int,int>> vec;\n        for(auto i:sp){\n            vec.push_back({i[0],i[1]});\n        }\n        sort(begin(vec),end(vec),cmp);\n        // for(auto i:vec) cout<<i.first<<\" \";\n        int ans=1;\n        int x1=vec[0].first;\n        int y1=vec[0].second;\n        long double angle=findAngle(x1,y1,vec[1].first,vec[1].second);\n        for(int i=1;i<vec.size();i++){\n            int x2=vec[i].first;\n            int y2=vec[i].second;\n            \n            // cout<<angle<<\" \"<<findAngle(x1,y1,x2,y2)<<endl;\n            if(findAngle(x1,y1,x2,y2)==angle) continue;\n            else{\n                \n                ans++;\n                x1=vec[i-1].first;\n                y1=vec[i-1].second;\n                angle=findAngle(x1,y1,x2,y2);\n            }\n            \n        }\n        // if(x1!=vec[vec.size()-1].first && y1!=vec[vec.size()-1].second) ans++;\n        // cout<<endl<<findAngle(1,1000000000,999999999,999999999);\n        return ans;\n            \n        \n    }\n};\n\n\n// [[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]]\n// [[3,4],[1,2],[7,8],[2,3]]\n// [[36,9],[17,93],[34,4],[30,11],[11,41],[53,36],[5,92],[81,92],[28,36],[3,45],[72,33],[64,1],[4,70],[16,73],[99,20],[49,33],[47,74],[83,91]]\n// [[1,1]]"}