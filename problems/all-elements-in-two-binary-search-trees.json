{"problemName":"all-elements-in-two-binary-search-trees","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n   void pushLeft(stack<TreeNode *> &st, TreeNode * n) {\n       \n       while(n) {\n           st.push(exchange(n, n->left));\n       }\n   }\n    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {\n        stack<TreeNode* > st1, st2;\n        pushLeft(st1, root1);\n        pushLeft(st2, root2);\n        \n        \n        vector<int> ans;\n        while(!st1.empty() || !st2.empty()) {\n            \n            auto &st = (st1.empty() ? st2 : st2.empty() ? st1 : st1.top()->val < st2.top()->val ? st1 : st2);\n            \n            auto top = st.top();\n            st.pop();\n            ans.push_back(top->val);\n            pushLeft(st, top->right);\n            \n        }\n        return ans;\n    }\n    \n};"}