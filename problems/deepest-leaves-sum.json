{"problemName":"deepest-leaves-sum","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int height(TreeNode * root) {\n        if(!root) {\n            \n            return 0;\n        }\n        return 1 + max(height(root->left), height(root->right));\n    }\n    int sum(TreeNode * root, int h) {\n        if(!root)  {\n            return 0;\n        }\n        if(!root->left  and !root->right) {\n            if(h == 1) {\n                return root->val;\n            }\n            return 0;\n        }\n        int l = sum(root->left, h - 1);\n        int r = sum(root->right, h - 1);\n        return l + r;\n    }\n    int deepestLeavesSum(TreeNode* root) {\n        int h = height(root);\n        return sum(root, h);\n        \n    }\n};"}