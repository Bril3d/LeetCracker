{"problemName":"longest-non-decreasing-subarray-from-two-arrays","language":"cpp","code":"int dp[100005][2];\nclass Solution {\npublic:\n    int maxNonDecreasingLength(vector<int>& nums1, vector<int>& nums2) {\n        int n = nums1.size();\n        int ans = 1;\n        for(int i = 0; i <=n ;i++)dp[i][0] = dp[i][1] = 1;\n        for(int i = 1; i < n; i++){\n            if (nums1[i] >= nums1[i - 1]) dp[i][0] = dp[i - 1][0] + 1;\n            if (nums1[i] >= nums2[i - 1]) dp[i][0] = max(dp[i][0], dp[i - 1][1] + 1);\n            if (nums2[i] >= nums1[i - 1]) dp[i][1] = dp[i - 1][0] + 1;\n            if (nums2[i] >= nums2[i - 1]) dp[i][1] = max(dp[i][1], dp[i - 1][1] + 1);\n            ans = max({ans, dp[i][0], dp[i][1]});\n        }\n        return ans;\n    }\n};"}