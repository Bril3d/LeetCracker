{"problemName":"copy-list-with-random-pointer","language":"cpp","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* next;\n    Node* random;\n    \n    Node(int _val) {\n        val = _val;\n        next = NULL;\n        random = NULL;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        if(head == NULL)return NULL;\n        unordered_map<Node *, Node*> umap;\n        Node *newHead = new Node(head->val);\n        umap[head] = newHead;\n        Node *temp1 = head->next, *temp2 = newHead;\n        while(temp1 != NULL){\n            // cout<<temp1->val<<\", \";\n            Node *node = new Node(temp1->val);\n            umap[temp1] = node;\n            temp2->next = node;\n            temp2 = temp2->next;\n            temp1 = temp1->next;\n        }\n        temp1 = head;\n        temp2 = newHead;\n        while(temp1 != NULL){\n            if(temp1->random != NULL)\n                temp2->random = umap[temp1->random];\n            temp2 = temp2->next;\n            temp1 = temp1->next;\n        }\n        return newHead;\n    }\n};"}