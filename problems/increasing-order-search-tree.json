{"problemName":"increasing-order-search-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode *prev = NULL;\n    void helper(TreeNode* root, vector<int>&arr){\n        if(root == NULL) return;\n        helper(root->left, arr);\n        arr.push_back(root->val);\n        helper(root->right, arr);\n    }\n    TreeNode* increasingBST(TreeNode* root) {\n        if(root == NULL) return NULL;\n        vector<int> arr;\n        helper(root, arr);\n        TreeNode *root2 = new TreeNode(arr[0]), *prev = root2;\n        for(int i = 1;i<arr.size();i++){\n            prev->right = new TreeNode(arr[i]);\n            prev = prev->right;\n        }\n        return root2;\n    }\n};"}