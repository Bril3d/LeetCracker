{"problemName":"possible-bipartition","language":"cpp","code":"class Solution {\npublic:\n    \n    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {\n        vector<int> color(n+1,0);\n        vector<int> adj[n+1];\n        for(int i=0;i<dislikes.size();i++){\n            adj[dislikes[i][0]].push_back(dislikes[i][1]);\n            adj[dislikes[i][1]].push_back(dislikes[i][0]);\n        }\n        for(int i=1;i<=n;i++){\n            if(color[i]==0){\n                color[i]=1;\n                queue<int> q;\n                q.push(i);\n                while(!q.empty()){\n                    int node=q.front();\n                    q.pop();\n                    for(int child:adj[node]){\n                        if(color[child]==color[node])return false;\n                        if(!color[child]){\n                            q.push(child);\n                            color[child]=-1*color[node];\n                        }\n                    }\n                }\n            }\n        }\n        \n        return true;\n    }\n};"}