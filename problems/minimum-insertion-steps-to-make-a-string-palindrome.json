{"problemName":"minimum-insertion-steps-to-make-a-string-palindrome","language":"cpp","code":"class Solution {\npublic:\n    int LCS(string &s1, string &s2) {\n        int n = s1.length();\n        int m = s2.length();\n        int dp[n + 1][m + 1];\n        memset(dp, 0, sizeof(dp));\n\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 1; j <= m; j++)\n            {\n                if (s1[i - 1] == s2[j - 1])\n                {\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                }\n                else\n                {\n                    dp[i][j] = max(dp[i - 1][j] , dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[n][m];\n    }\n    int minInsertions(string s) {\n        string t = s;\n        reverse(t.begin(), t.end());\n        return s.length() - LCS(s, t);\n    }\n};"}