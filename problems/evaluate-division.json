{"problemName":"evaluate-division","language":"cpp","code":"class Solution {\npublic:\n    void dfs(map<string, vector<pair<string, double>>> & adj, map<pair<string, string>, double> &mp,\n    map<string, int > &vis, string par, string curr, double prod){\n        vis[curr] = 1;\n        mp[{par, curr}] = prod;\n        for(auto i : adj[curr]){\n            if(!vis[i.first]){\n                dfs(adj, mp, vis, par, i.first, prod * i.second);\n            }\n        }\n    }\n    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {\n        map<pair<string, string>, double> mp;\n        set<string> st;\n        map<string, vector<pair<string, double>>> adj;\n        for(int i = 0; i < values.size(); i++){\n            st.insert(equations[i][0]);\n            st.insert(equations[i][1]);\n            adj[equations[i][0]].push_back({equations[i][1], values[i]});\n            adj[equations[i][1]].push_back({equations[i][0], 1/values[i]});\n        }\n        for(auto i : st){\n            map<string, int> vis;\n            dfs(adj, mp, vis,i, i, 1);\n        }\n        // for(auto i : mp){\n        //     cout<<i.first.first<<\" \"<<i.first.second<<\" \"<<i.second<<endl;\n        // }\n        vector<double> ans;\n        for(auto i : queries){\n            if(mp.find({i[0], i[1]}) != mp.end()){\n                ans.push_back(mp[{i[0], i[1]}]);\n            }else{\n                ans.push_back(-1.000);\n            }\n        }\n        return ans;\n    }\n};"}