{"problemName":"lfu-cache","language":"cpp","code":"class LFUCache {\n    int cap;\n    int size;\n    int minFreq;\n    unordered_map<int, pair<int, int>> m; //key to {value,freq};\n    unordered_map<int, list<int>::iterator> mIter; //key to list iterator;\n    unordered_map<int, list<int>>  fm;  //freq to key list;\npublic:\n    LFUCache(int capacity) {\n        cap=capacity;\n        size=0;\n    }\n    \n    int get(int key) {\n        if(m.count(key)==0) return -1;\n        \n        fm[m[key].second].erase(mIter[key]);\n        m[key].second++;\n        fm[m[key].second].push_back(key);\n        mIter[key]=--fm[m[key].second].end();\n        \n        if(fm[minFreq].size()==0 ) \n              minFreq++;\n        \n        return m[key].first;\n    }\n    \n   void put(int key, int value) {\n        if(cap<=0) return;\n        \n        int storedValue=get(key);\n        if(storedValue!=-1)\n        {\n            m[key].first=value;\n            return;\n        }\n        \n        if(size>=cap )\n        {\n            m.erase( fm[minFreq].front() );\n            mIter.erase( fm[minFreq].front() );\n            fm[minFreq].pop_front();\n            size--;\n        }\n        \n        m[key]={value, 1};\n        fm[1].push_back(key);\n        mIter[key]=--fm[1].end();\n        minFreq=1;\n        size++;\n    }\n};"}