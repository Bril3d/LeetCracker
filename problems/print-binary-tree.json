{"problemName":"print-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int height(TreeNode*root){\n        if(!root)return 0;\n        return max(height(root->left), height(root->right)) + 1;\n    }\n    vector<vector<string>> printTree(TreeNode* root) {\n        int h = height(root);\n        h--;\n        int m = h + 1;\n        int n = pow(2, h + 1) - 1;\n        vector<vector<string>> matrix(m, vector<string>(n, \"\"));\n        matrix[0][(n-1)/2] = to_string(root->val);\n        unordered_map<TreeNode*, pair<int,int>> umap;\n        umap[root] = {0, (n-1)/2};\n        \n        queue<TreeNode*> q;\n        q.push(root);\n        while(!q.empty()){\n            int n = q.size();\n            for(int i = 0;i<n;i++){\n                TreeNode *front= q.front();\n                q.pop();\n                cout<<front->val<<',';\n                int r = umap[front].first;\n                int c = umap[front].second;\n                if(front->left){\n                    int a = r + 1;\n                    int b = c - pow(2, h - r - 1);\n                    umap[front->left] = {a,b};\n                    matrix[a][b] = to_string(front->left->val);\n                    q.push(front->left);\n                }\n                if(front->right){\n                    int a = r + 1;\n                    int b = c + pow(2, h - r - 1);\n                    umap[front->right] = {a,b};\n                    matrix[a][b] = to_string(front->right->val);\n                    q.push(front->right);\n                }\n            }\n        }\n        for(auto i : umap){\n            cout<<i.first->val<<\": {\"<<i.second.first<<\", \"<<i.second.second<<\"}\";\n        }\n        cout<<endl;\n        return matrix;\n    }\n};"}