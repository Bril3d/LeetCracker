{"problemName":"longest-increasing-subsequence-ii","language":"cpp","code":"const int N = 1e5 + 10;\nclass Solution {\npublic:\n    int seg[4 * N];\n    int arr[N];\n    int query(int ind, int lo, int hi, int l, int r){\n        if(hi < l || lo > r)return 0;\n        if(lo >= l && hi <= r)return seg[ind];\n        // cout<<lo<<\" \"<<hi<<\" \"<<l<<\" \"<<r<<endl;\n        int mid = (lo + hi)/2;\n        int left = query(2 * ind + 1, lo, mid, l, r);\n        int right = query(2 * ind + 2, mid + 1, hi, l, r);\n        return max(left, right);\n    }\n    void upd(int ind, int lo, int hi, int idx, int val){\n        if(lo > hi)return;\n        if(lo == hi){\n            seg[ind] = val;\n            arr[lo] = val;\n            return;\n        }\n        int mid = (lo + hi)/2;\n        if(idx <= mid)\n            upd(2 *ind + 1, lo, mid, idx, val);\n        else\n            upd(2 * ind + 2, mid + 1, hi, idx, val);\n        seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);\n        // cout<<ind<<\" \"<<seg[ind]<<endl;\n    }\n    int lengthOfLIS(vector<int>& nums, int k) {\n        int ans = 0;\n        for(auto i : nums){\n            int prev = max(0, i - k);\n            int _max = query(0, 0, N - 1, prev, i - 1);\n            ans = max(ans, 1 + _max);\n            // for(int i = 0; i < 20; i++){\n            //     cout<<arr[i]<<\" \";\n            // }\n            // cout<<endl;\n            // cout<<i<<\" \"<<_max<<endl;\n            upd(0, 0, N - 1, i, 1 + _max);\n        }\n        return ans;\n    }\n};"}