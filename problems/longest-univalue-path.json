{"problemName":"longest-univalue-path","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int len = 0;\n    int dfs(TreeNode * root, int parent) {\n        if(!root) {\n            return 0;\n        }\n        int left = dfs(root->left, root->val);\n        int right = dfs(root->right, root->val);\n        int l = 0;\n        int r  = 0;\n        if(root->left and root->left->val == root->val) {\n            l = left  + 1;\n        }\n        if(root->right and root->right->val == root->val) {\n            r = right + 1;\n        }\n        len = max(len, l + r);\n        \n        return max(l, r);\n    }\n    \n    \n    int longestUnivaluePath(TreeNode* root) {\n        len = 0;\n        dfs(root, -1);\n        return len;\n    }\n};"}