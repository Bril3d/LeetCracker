{"problemName":"binary-tree-level-order-traversal","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        if(root == NULL){\n            return {};\n        }\n        vector<vector<int>> ans;\n        vector<int> ds;\n        queue<TreeNode *> q;\n        q.push(root);\n        q.push(NULL);\n        while(!q.empty()){\n            TreeNode *front = q.front();\n            q.pop();\n            if(front == NULL){\n                ans.push_back(ds);\n                ds.clear();\n                if(!q.empty()){\n                    q.push(NULL);\n                }\n            }else{\n                if(front->left != NULL){\n                    q.push(front->left);\n                }\n                if(front->right != NULL){\n                    q.push(front->right);\n                }\n                ds.push_back(front->val);\n            }\n        }\n        return ans;\n    }\n};"}