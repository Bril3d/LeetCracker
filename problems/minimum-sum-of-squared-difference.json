{"problemName":"minimum-sum-of-squared-difference","language":"cpp","code":"class Solution {\npublic:\n    long long minSumSquareDiff(vector<int>& nums1, vector<int>& nums2, int k1, int k2) {\n        unordered_map<long long,long long> umap;\n        priority_queue<int> pq; \n        for(int i=0;i<nums1.size();i++){\n            if(!umap.count(abs(nums1[i]-nums2[i]))){\n                pq.push(abs(nums1[i]-nums2[i]));\n            }\n            umap[abs(nums1[i]-nums2[i])]++;\n        }\n        \n        \n        long long ans=0;\n        long long k=k1+k2;\n        while(pq.size()&&k){\n           \n            int tp=pq.top();\n            pq.pop();\n            if(tp==0) continue;\n             // cout<<tp<<\" \"<<umap[tp]<<endl;\n            \n            if(!umap.count(tp-1)&&tp-1!=0){\n                pq.push(tp-1);\n            }\n            \n            if(tp-1!=0){\n                umap[tp-1]+=min({umap[tp],k});\n            }\n            \n            int val=min(umap[tp],k);\n            umap[tp]-=min(umap[tp],k);\n            k-=val;\n            \n        }\n        \n        for(auto i:umap){\n            ans+=i.second*i.first*i.first;\n        }\n        return ans;\n        \n    }\n};"}