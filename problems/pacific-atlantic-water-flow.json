{"problemName":"pacific-atlantic-water-flow","language":"cpp","code":"class Solution {\npublic:\n    int m, n;\n    vector<vector<int> > ans;\n    vector<vector<bool> > atlantic, pacific;\n    queue<pair<int, int> > q;\n    vector<vector<int> > pacificAtlantic(vector<vector<int>>& mat) {\n        if(!size(mat)) return ans;\n        m = size(mat), n = size(mat[0]);\n        atlantic = pacific = vector<vector<bool> >(m, vector<bool>(n, false));\n        for(int i = 0; i < m; i++) bfs(mat, pacific, i, 0), bfs(mat, atlantic, i, n - 1);\n        for(int i = 0; i < n; i++) bfs(mat, pacific, 0, i), bfs(mat, atlantic, m - 1, i);             \n        return ans;\n    }\n    void bfs(vector<vector<int> >& mat, vector<vector<bool> >& visited, int i, int j){        \n        q.push({i, j});\n        while(!q.empty()){\n            tie(i, j) = q.front(); q.pop();\n            if(visited[i][j]) continue;\n            visited[i][j] = true;\n            if(atlantic[i][j] && pacific[i][j]) ans.push_back(vector<int>{i, j});\n            if(i + 1 <  m && mat[i + 1][j] >= mat[i][j]) q.push({i + 1, j});\n            if(i - 1 >= 0 && mat[i - 1][j] >= mat[i][j]) q.push({i - 1, j});\n            if(j + 1 <  n && mat[i][j + 1] >= mat[i][j]) q.push({i, j + 1});\n            if(j - 1 >= 0 && mat[i][j - 1] >= mat[i][j]) q.push({i, j - 1});\n        }\n    }\n};"}