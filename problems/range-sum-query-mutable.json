{"problemName":"range-sum-query-mutable","language":"cpp","code":"class NumArray {\npublic:\n    vector<int> arr;\n    vector<int> bit;\n    NumArray(vector<int>& nums) {\n        arr = nums;\n        bit.assign(nums.size() + 1, 0);\n        for(int i = 0; i < nums.size();i++){\n            bitUp(i + 1, nums[i]);\n        }\n    }\n    void update(int i, int val) {\n        bitUp(i + 1, val - arr[i]);\n        arr[i] = val;\n    }\n    void bitUp(int i, int val){\n        while(i < bit.size()){\n            bit[i] += val;\n            i += (i & (-i));\n        }\n    }\n    int sum(int i){\n        int ans = 0;\n        while(i > 0){\n            ans += bit[i];\n            i -= (i & (-i));\n        }\n        return ans;\n    }\n    \n    int sumRange(int left, int right) {\n        return sum(right + 1) - sum(left);\n    }\n};\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * obj->update(index,val);\n * int param_2 = obj->sumRange(left,right);\n */"}