{"problemName":"longest-increasing-path-in-a-matrix","language":"cpp","code":"class Solution {\npublic:\nint dp[200][200]{};\nint maxpath,n,m;\n\nint solve(int i,int j,int prev,vector<vector<int>> &matrix){\n    if(i<0 || j<0 || i>=n || j>=m || matrix[i][j]<=prev){\n        return 0;\n    }\n    if(dp[i][j]){\n        return dp[i][j];\n    }\n    return dp[i][j]=1+max({solve(i-1,j,matrix[i][j],matrix),solve(i+1,j,matrix[i][j],matrix),solve(i,j-1,matrix[i][j],matrix),solve(i,j+1,matrix[i][j],matrix)});\n}\n\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        maxpath = 0,n = matrix.size(),m = matrix[0].size();\n        for(int i =0;i<n;i++){\n            for(int j =0;j<m;j++){\n                maxpath = max(maxpath,solve(i,j,-1,matrix));\n            }\n        }\n        return maxpath;\n        \n    }\n};"}