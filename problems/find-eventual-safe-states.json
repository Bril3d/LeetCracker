{"problemName":"find-eventual-safe-states","language":"cpp","code":"class Solution {\npublic:\n    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {\n        \n        int n = graph.size();\n        vector<int> adj[n];\n        vector<int> outdegree(n,0);\n        for(int i =0;i<n;i++){\n            for(auto it:graph[i]){\n                outdegree[i]++;\n                adj[it].push_back(i);\n            }\n        }\n        queue<int> q;\n        for(int i =0;i<n;i++){\n            if(outdegree[i]==0){\n                q.push(i);\n            }\n        }\n        vector<int> ans;\n        while(!q.empty()){\n            int node = q.front();\n            q.pop();\n            ans.push_back(node);\n            for(auto it:adj[node]){\n                outdegree[it]--;\n                if(outdegree[it]==0){\n                    q.push(it);\n                }\n            }\n        }\n        sort(ans.begin(),ans.end());\n        return ans;\n    }\n};"}