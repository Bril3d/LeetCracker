{"problemName":"minimum-absolute-sum-difference","language":"cpp","code":"class Solution {\npublic:\n    int minAbsoluteSumDiff(vector<int>& nums1, vector<int>& nums2) {\n        int n =nums1.size();\n        long long int ans = 0;\n        const int MOD = 1e9 + 7;\n        for(int i = 0; i < n;i++){\n            ans += abs(nums1[i] - nums2[i]);\n            ans %= MOD;\n        }\n        vector<int> arr = nums1;\n        sort(arr.begin(), arr.end());\n        long long int diff = 0;\n        for(int i = 0; i < n;i++){\n            auto it = lower_bound(arr.begin(), arr.end(), nums2[i]);\n            if(it != arr.end()){\n                diff = min(diff, 1LL* abs(*it - nums2[i]) - abs(nums1[i] - nums2[i]));\n            }\n            if(it != arr.begin()){\n                it--;\n                diff = min(diff, 1LL* abs(*it - nums2[i]) - abs(nums1[i] - nums2[i]));\n            }\n        }\n        return (ans + diff + MOD)%MOD;\n    }\n};"}