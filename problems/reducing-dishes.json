{"problemName":"reducing-dishes","language":"cpp","code":"int dp[505][505];\nclass Solution {\npublic:\n    int helper(vector<int> &arr,int ind, int cnt){\n        if(ind == arr.size())return 0;\n        if(dp[ind][cnt] != -1)return dp[ind][cnt];\n        int take = helper(arr, ind + 1, cnt + 1) + arr[ind] * cnt;\n        int notTake = helper(arr, ind + 1, cnt);\n        return dp[ind][cnt] = max(take, notTake);\n    }\n    int maxSatisfaction(vector<int>& satisfaction) {\n        memset(dp, -1, sizeof dp);\n        sort(satisfaction.begin(), satisfaction.end());\n        return helper(satisfaction, 0, 1);\n    }\n};"}