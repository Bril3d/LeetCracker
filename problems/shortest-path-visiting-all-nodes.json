{"problemName":"shortest-path-visiting-all-nodes","language":"cpp","code":"class Solution {\npublic:\n    \n    int dp[13][1 << 13];\n    \n    int dfs(int node, int mask, vector<vector<int> > &graph) {\n        if(dp[node][mask] != 0) {\n            return dp[node][mask];\n        }\n        if((mask & (mask - 1)) == 0) {\n            return 0;\n        }\n        \n        \n        dp[node][mask] =  INT_MAX - 1;\n        for(auto neighbour : graph[node]) {\n            if((mask & (1 << neighbour)) != 0) {\n                dp[node][mask] = min(dp[node][mask], 1 + (min(dfs(neighbour, mask, graph), dfs(neighbour, mask  ^ (1 << node), graph))));\n            }\n        }\n        return dp[node][mask];\n    }\n    int shortestPathLength(vector<vector<int>>& graph) {\n        int n = graph.size();\n        memset(dp, 0, sizeof dp);\n        \n        \n        \n        int ans = INT_MAX;\n        int mask = (1 << n) - 1;\n        for(int i = 0; i< n; i++) \n        {\n            \n            ans = min(ans, dfs(i, mask, graph));\n            \n        }\n        return ans;\n    }\n};"}