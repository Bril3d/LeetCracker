{"problemName":"make-array-strictly-increasing","language":"cpp","code":"int dp[2005][2005][2];\nclass Solution {\npublic:\n    short dp[2001][2001][2] = {}, max_val = 2002;\nshort dfs(vector<int>& t, vector<int>& s, int i, int j, bool prev_t) {\n    if (i >= t.size()) \n      return 0;\n    int prev = prev_t ? i == 0 ? INT_MIN : t[i - 1] : s[j];\n    j = upper_bound(begin(s) + j, end(s), prev) - begin(s);\n    if (dp[i][j][prev_t] == 0) {\n        dp[i][j][prev_t] = max_val;\n        if (j < s.size())\n            dp[i][j][prev_t] = dfs(t, s, i + 1, j, false) + 1;\n        if (prev < t[i])\n            dp[i][j][prev_t] = min(dp[i][j][prev_t], dfs(t, s, i + 1, j, true));\n    }\n    return dp[i][j][prev_t];\n}\nint makeArrayIncreasing(vector<int>& t, vector<int>& s) {\n  sort(begin(s), end(s));\n  auto res = dfs(t, s, 0, 0, true);\n  return res >= max_val ? -1 : res;\n}\n};"}