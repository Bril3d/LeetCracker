{"problemName":"recover-binary-search-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode *prev = NULL, *first = NULL, *second = NULL;\n    void inorder(TreeNode *root){\n        if(root == NULL) return;\n        inorder(root->left);\n        if(first == nullptr && prev->val > root->val){\n            first = prev;\n        }\n        if(first != nullptr && prev->val > root->val){\n            second = root;\n        }\n        prev = root;\n        inorder(root->right);\n    }\n    void recoverTree(TreeNode* root) {\n        prev = new TreeNode(INT_MIN);\n        inorder(root);\n        swap(first->val, second->val);\n    }\n};"}