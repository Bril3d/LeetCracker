{"problemName":"diameter-of-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map<TreeNode *,int> uheights;\n    int height(TreeNode * root){\n        if(root == NULL) return 0;\n        if(uheights.find(root) != uheights.end()) return uheights[root];\n        return uheights[root] = max(height(root->left), height(root->right)) + 1; \n    }\n    int diameterOfBinaryTree(TreeNode* root) {\n        if(root == NULL) return 0;\n        int l = diameterOfBinaryTree(root->left);\n        int n = height(root->left) + height(root->right);\n        int r = diameterOfBinaryTree(root->right);\n        return max(n, max(l,r));\n    }\n};"}