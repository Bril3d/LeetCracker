{"problemName":"unique-paths-iii","language":"cpp","code":"class Solution {\npublic:\n    int n, m, tot = 0;\n    vector<int> arr = {-1, 0, 1, 0, -1};\n    int helper(vector<vector<int>> &grid, vector<vector<int>> &vis, int x, int y, int cnt){\n        if(grid[x][y] == 2){\n            if(cnt == n * m - tot)return 1;\n            else return 0;\n        }\n        vis[x][y] = 1;\n        int ans = 0;\n        for(int i = 0; i < 4; i ++){\n            int _x = x + arr[i], _y = y + arr[i + 1];\n            if(_x >=0 && _x < n && _y>=0 &&_y <m &&!vis[_x][_y] && grid[_x][_y] != -1){\n                ans += helper(grid, vis, _x, _y, cnt + 1);\n            }\n        }\n        vis[x][y] = 0;\n        return ans;\n    }\n    int uniquePathsIII(vector<vector<int>>& grid) {\n        n = grid.size(), m = grid[0].size();\n        tot = 0;\n        for(int i= 0 ; i < n;i++)for(int j = 0; j < m;j++)if(grid[i][j] == -1)tot++;\n        for(int i = 0; i < n; i ++){\n            for(int j = 0; j < m; j++){\n                vector<vector<int>> vis(n, vector<int>(m, 0));\n                if(grid[i][j] == 1){\n                    return helper(grid, vis, i, j, 1);\n                }\n            }\n        }\n        return -1;\n    }\n};"}