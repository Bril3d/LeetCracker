{"problemName":"design-add-and-search-words-data-structure","language":"cpp","code":"class Node{\npublic:\n    vector<Node *> arr;\n    bool flag;\n    Node(){\n        arr.assign(26, NULL);\n        flag = false;\n    }\n    bool hasKey(char c){\n        return (arr[c-'a'] != NULL);\n    }\n    void setKey(char c){\n        arr[c - 'a'] = new Node();\n    }\n    Node *getKeyNode(char c){\n        return arr[c - 'a'];\n    }\n    void setWordEnd(){\n        flag = true;\n    }\n    bool isWordEnd(){\n        return flag;\n    }\n};\nclass Trie{\npublic:\n    Node *root;\n    Trie(){\n        root = new Node();\n    }\n    void insert(string word){\n        Node *node = root;\n        for(auto i : word){\n            if(!node->hasKey(i)){\n                node->setKey(i);\n            }\n            node = node->getKeyNode(i);\n        }\n        node->setWordEnd();\n    }\n    bool helper(string &word, int ind, Node *node){\n        if(ind == word.size()){\n            return node->isWordEnd();\n        }\n        if(word[ind] == '.'){\n            for(auto it : node->arr){\n                if(it == NULL)continue;\n                if(helper(word, ind + 1, it)){\n                    return true;\n                }\n            }\n            return false;\n        }else{\n            if(!node->hasKey(word[ind])){\n                return false;\n            }\n            return helper(word, ind + 1, node->getKeyNode(word[ind]));\n        }\n    }\n    bool search(string word){\n        Node *node = root;\n        return helper(word, 0, node);\n    }\n};\nclass WordDictionary {\npublic:\n    Trie *trie;\n    WordDictionary() {\n        trie = new Trie();\n    }\n    \n    void addWord(string word) {\n        trie->insert(word);\n    }\n    \n    bool search(string word) {\n        return trie->search(word);\n    }\n};\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary* obj = new WordDictionary();\n * obj->addWord(word);\n * bool param_2 = obj->search(word);\n */"}