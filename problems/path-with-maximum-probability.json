{"problemName":"path-with-maximum-probability","language":"cpp","code":"class Solution {\npublic:\n    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {\n        vector<vector<pair<int, double>>> adj(n);\n        for (int i = 0; i < edges.size(); i++)\n        {\n            auto it = edges[i];\n            adj[it[0]].push_back(make_pair(it[1], succProb[i]));\n            adj[it[1]].push_back(make_pair(it[0], succProb[i]));\n        }\n        \n        vector<double> dist(n, 0);\n        dist[start] = 1;\n        queue<int> q;\n        q.push(start);\n        while (!q.empty())\n        {\n            int front = q.front();\n            q.pop();\n            for (auto i : adj[front])\n            {\n                if (dist[front] * i.second > dist[i.first])\n                {\n                    dist[i.first] = dist[front] * i.second;\n                    q.push(i.first);\n                }\n            }\n        }\n        return dist[end];\n    }\n};"}