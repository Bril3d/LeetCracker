{"problemName":"flatten-a-multilevel-doubly-linked-list","language":"cpp","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* prev;\n    Node* next;\n    Node* child;\n};\n*/\n\nclass Solution {\npublic:\n    Node* solve(Node* head) {\n    //base case\n    //recursive case\n    Node* curr = head, *n;\n    Node* ans = head;\n    while(curr) {\n        n = curr->next;\n        Node* child = curr->child;\n        if(child) {\n            Node* tail = solve(child);\n            child->prev = curr;\n            curr->next = child;\n            tail->next = n;\n            if(n)\n            n->prev = tail;\n            curr->child = nullptr;\n            curr = tail;\n        }\n        else {\n            curr = curr->next;\n        }\n        \n        if(curr) {\n            ans = curr;\n        }\n        \n        \n    }\n    \n    return ans;\n    \n}\n    Node* flatten(Node* head) {\n        if(head) {\n            solve(head);\n        }\n        \n        return head;\n    }\n};"}