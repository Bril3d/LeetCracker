{"problemName":"sudoku-solver","language":"cpp","code":"class Solution {\npublic:\n    const int N = 9;\n    bool isValid(vector<vector<char>> &board, int i, int j, int num)\n    {\n        char c = '0' + num;\n        for (int k = 0; k < 9; k++)\n        {\n            if (board[i][k] == c)\n                return false;\n            if (board[k][j] == c)\n                return false;\n        }\n        int x = i / 3;\n        int y = j / 3;\n        for (int k = 3 * x; k < 3 * (x + 1); k++)\n        {\n            for (int l = 3 * y; l < 3 * (y + 1); l++)\n            {\n                if (board[k][l] == c)\n                    return false;\n            }\n        }\n        return true;\n    }\n    bool helper(vector<vector<char>> &board, int startx, int starty)\n    {\n        for (int i = 0; i < N; i++)\n        {\n            for (int j = 0; j < N; j++)\n            {\n                if (board[i][j] == '.')\n                {\n                    for (int k = 1; k <= N; k++)\n                    {\n                        if (isValid(board, i, j, k))\n                        {\n                            board[i][j] = ('0' + k);\n                            if (helper(board, i, j))\n                            {\n                                return true;\n                                // display(board);\n                                // cout << \"TRUE\" << endl;\n                            }\n                            board[i][j] = '.';\n                        }\n                    }\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    void solveSudoku(vector<vector<char>> &board)\n    {\n        helper(board, 0, 0);\n    }\n};"}