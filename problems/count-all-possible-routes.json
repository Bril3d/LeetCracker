{"problemName":"count-all-possible-routes","language":"cpp","code":"class Solution {\npublic:\n    const int MOD = 1000000007;\n\n    int helper(const vector<int>& locations, int city, int finish, int remainFuel, vector<vector<int>>& memo) {\n        if (remainFuel < 0) {\n            return 0;\n        }\n        \n        if (memo[city][remainFuel] != -1) {\n            return memo[city][remainFuel];\n        }\n        \n        int total = city == finish ? 1 : 0;\n        \n        for (int nextCity = 0; nextCity < locations.size(); nextCity++) {\n            if (nextCity != city && remainFuel >= abs(locations[nextCity] - locations[city])) {\n                total = (total + helper(locations, nextCity, finish, remainFuel - abs(locations[nextCity] - locations[city]), memo)) % MOD;\n            }\n        }\n        \n        return memo[city][remainFuel] = total;\n    }\n\n    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {\n        int n = locations.size();\n        vector<vector<int>> memo(n, vector<int>(fuel + 1, -1));\n        return helper(locations, start, finish, fuel, memo);\n    }\n};"}