{"problemName":"similar-string-groups","language":"cpp","code":"typedef long long int ll;\nclass disjoint_set {\n    vector<int> v;\n    int sz;\npublic:\n    disjoint_set(int n) {\n        v.resize(n);\n        iota(v.begin(), v.end(), 0);\n        sz = n;\n    }\n\n    int find(int i) {\n        if (i != v[i])\n            v[i] = find(v[i]);\n        return v[i];\n    }\n    \n    void join(int i, int j) {\n        int ri = find(i), rj = find(j);\n        if (ri != rj) {\n            v[ri] = rj;\n            sz--;\n        }\n    }\n    \n    int size() {\n        return sz;\n    }\n};\nclass Solution {\npublic:\n    int numSimilarGroups(vector<string>& strs) {\n        int n = strs.size();\n        disjoint_set *d = new disjoint_set(n);\n        for(int i = 0; i < n; i++){\n            for(int j = i + 1; j < n; j ++){\n                int c = 0;\n                for(int k = 0; k < strs[i].length(); k ++){\n                    if(strs[i][k] != strs[j][k]){\n                        c++;\n                    }\n                }\n                if(c <= 2){\n                    d->join(i, j);\n                }\n            }\n        }\n        return d->size();\n    }\n};"}