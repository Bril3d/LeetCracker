{"problemName":"number-of-increasing-paths-in-a-grid","language":"cpp","code":"static int MOD=1e9+7;\nstatic vector<int> dirs={0,1,0,-1,0};\nclass Solution {\npublic:\n    vector<vector<long>> memo;\n    long dp(vector<vector<int>>& grid,int i,int j) {\n        long result=1;  // Contribution of current cell as an increasing sequence.\n        if(memo[i][j]!=-1)  // Return the cached results if they exist.\n            return memo[i][j];\n        for(int d=0;d<4;d++) {  // Check all 4 directions.\n            int x=i+dirs[d],y=j+dirs[d+1];\n            if(x>=0&&y>=0&&x<grid.size()&&y<grid[0].size()&&grid[x][y]>grid[i][j])\n                result=(result+dp(grid,x,y))%MOD;       // Add the total number of cells in the longest path for all directions.\n        }\n        return memo[i][j]=result;\n    }\n    int countPaths(vector<vector<int>>& grid) {\n        long result=0;\n        memo.resize(grid.size(),vector<long>(grid[0].size(),-1));\n        for(int i=0;i<grid.size();i++)      // For each cell as a starting point calculate the number of increasing paths it can contribute.\n            for(int j=0;j<grid[0].size();j++)\n                result=(result+dp(grid,i,j))%MOD;\n        return result;\n    }\n};"}