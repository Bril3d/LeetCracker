{"problemName":"check-completeness-of-a-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCompleteTree(TreeNode* root) {\n        map<int, vector<int>> m;\n        queue<TreeNode *> q;\n        q.push(root);\n        int level = 0;\n        while(!q.empty()){\n            level++;\n            int temp = 0;\n            int n = q.size();\n            for(int i = 0; i < n;i++){\n                TreeNode *f = q.front();\n                q.pop();\n                temp++;\n                if(f != NULL){\n                    m[level].push_back(temp); \n                    q.push(f->left);\n                    q.push(f->right);\n                }\n            }\n        }\n        int pow = 1;\n        int ind = 0;\n        for(auto i : m){\n            if(ind != m.size() -1 && i.second.size() != pow)return false;\n            ind++;\n            pow *= 2;\n            for(int j = 0; j < i.second.size();j++){\n                if(i.second[j] != j + 1)return false;\n            }\n        }\n        return true;\n    }\n};"}