{"problemName":"range-frequency-queries","language":"cpp","code":"\n\nclass RangeFreqQuery {\npublic:\n    vector<unordered_map<int,int> > tree;\n     vector<int> vec;\n    unordered_map<string,int> dp;\n    \n    void buildTree(int str,int end,int curr){\n        if(str==end){\n            tree[curr][vec[str]]++;\n            return ;\n        }\n        \n        int mid=(str+end)/2;\n        buildTree(str,mid,curr*2);\n        buildTree(mid+1,end,curr*2+1);\n        \n      \n        \n        for(auto i:tree[2*curr]){\n            tree[curr][i.first]+=i.second;\n        }\n        for(auto i:tree[2*curr+1]){\n            tree[curr][i.first]+=i.second;\n        }\n        \n\n        \n    }\n    RangeFreqQuery(vector<int>& arr) {\n        vec=arr;\n        tree.resize(4*arr.size());\n        buildTree(0,arr.size()-1,1);\n        \n    }\n    \n    int query_(int &left, int &right, int &value,int str,int end,int curr) {\n        if(end<left||right<str) return 0;\n        if(left<=str&&right>=end){\n            return tree[curr][value]; \n        }\n        \n        int mid=(str+end)/2;\n        int lf=query_(left,right,value,str,mid,2*curr);\n        int rt=query_(left,right,value,mid+1,end,2*curr+1);\n        return lf+rt;\n    }\n    int query(int left, int right, int value){\n       \n        return query_(left,right,value,0,vec.size()-1,1);\n    }\n};\n\n/**\n * Your RangeFreqQuery object will be instantiated and called as such:\n * RangeFreqQuery* obj = new RangeFreqQuery(arr);\n * int param_1 = obj->query(left,right,value);\n */"}