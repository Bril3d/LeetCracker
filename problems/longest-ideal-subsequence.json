{"problemName":"longest-ideal-subsequence","language":"cpp","code":"class Solution {\npublic:\n    int Lis2(string a, int k, int n) {\n    vector<char> tails(n + 1, 'a');\n    // memset(tails, 0, sizeof tails);\n    for(int i = 0;  i < n; i++) {\n        tails[i] = a[i];\n    }\n    int size = 0;\n\n    for (int i = 0; i < n; i++) {\n        char x = a[i];\n\n\n        int s = 0;\n        int e = size;\n        while (s < e) {\n            int mid = (s + e) / 2;\n            if (abs(tails[mid] - x) > k) {\n                s = mid + 1;\n            }\n            else {\n                e = mid;\n            }\n        }\n\n        tails[s] = x;\n        if (s == size) {\n            size++;\n        }\n    }\n\n    return size;\n\n}\n   \n        int longestIdealString(string s, int k) {\n        int dp[150] = {}, res = 0;\n        for (auto& i : s) {\n            int cur = 0;\n            for (int j = i - k; j <= i + k; ++j)\n                cur = max(cur, dp[j] + 1);\n            res = max(res, dp[i] = cur);\n        }\n        return res;\n    }\n};"}