{"problemName": "binary-tree-cameras", "language": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : /**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nint status(TreeNode* root,int &n){\n    if(root==NULL){\n        return 1;\n    }\n    int l = status(root->left,n);\n    int r = status(root->right,n);\n    if(l==0 || r==0){\n        n++;\n        return 2;\n    }\n    if(l==2 || r==2){\n        return 1;\n    }\n    return 0;\n\n}\n    int minCameraCover(TreeNode* root) {\n        int n = 0;\n        if(status(root,n)==0){\n            n++;\n        }\n        return n;\n\n        \n    }\n};"}