{"problemName":"number-of-ways-of-cutting-a-pizza","language":"cpp","code":"class Solution {\npublic:\n    int ways(vector<string>& pizza, int k) {\n        int m = pizza.size(), n = pizza[0].size();\n        vector<vector<vector<int>>> dp = vector(k, vector(m, vector(n, -1)));\n        vector<vector<int>> preSum = vector(m+1, vector(n+1, 0)); // preSum[r][c] is the total number of apples in pizza[r:][c:]\n        for (int r = m - 1; r >= 0; r--)\n            for (int c = n - 1; c >= 0; c--)\n                preSum[r][c] = preSum[r][c+1] + preSum[r+1][c] - preSum[r+1][c+1] + (pizza[r][c] == 'A');\n        return dfs(m, n, k-1, 0, 0, dp, preSum);\n    }\n    int dfs(int m, int n, int k, int r, int c, vector<vector<vector<int>>>& dp, vector<vector<int>>& preSum) {\n        if (preSum[r][c] == 0) return 0; // if the remain piece has no apple -> invalid\n        if (k == 0) return 1; // found valid way after using k-1 cuts\n        if (dp[k][r][c] != -1) return dp[k][r][c];\n        int ans = 0;\n        // cut in horizontal\n        for (int nr = r + 1; nr < m; nr++) \n            if (preSum[r][c] - preSum[nr][c] > 0) // cut if the upper piece contains at least one apple\n                ans = (ans + dfs(m, n, k - 1, nr, c, dp, preSum)) % 1000000007;\n        // cut in vertical\n        for (int nc = c + 1; nc < n; nc++) \n            if (preSum[r][c] - preSum[r][nc] > 0) // cut if the left piece contains at least one apple\n                ans = (ans + dfs(m, n, k - 1, r, nc, dp, preSum)) % 1000000007;\n        return dp[k][r][c] = ans;\n    }\n};"}