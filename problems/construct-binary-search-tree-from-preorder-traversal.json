{"problemName":"construct-binary-search-tree-from-preorder-traversal","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* helper(vector<int> &preorder, int lo, int hi){\n        if(lo > hi){\n            return NULL;\n        }\n        if(lo == hi){\n            return new TreeNode(preorder[lo]);\n        }\n        TreeNode *root = new TreeNode(preorder[lo]);\n        \n        int i = lo + 1;\n        for(;i<=hi;i++){\n            if(preorder[lo] < preorder[i]){\n                break;\n            }\n        }\n        root->left = helper(preorder, lo + 1, i - 1);\n        root->right = helper(preorder, i, hi);\n        return root;\n    }\n    TreeNode* bstFromPreorder(vector<int>& preorder) {\n        return helper(preorder, 0, preorder.size() - 1); \n    }\n};"}