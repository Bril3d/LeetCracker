{"problemName":"last-day-where-you-can-still-cross","language":"cpp","code":"class Solution {\npublic:\n    bool isPossible(int m, int n, int t, vector<vector<int>>& cells) {\n        vector<vector<int>> grid(m + 1, vector<int>(n + 1, 0)); // Grid representation\n        vector<pair<int, int>> directions {{1, 0}, {-1, 0}, {0, 1}, {0, -1}}; // Possible directions\n\n        for (int i = 0; i < t; i++) {\n            grid[cells[i][0]][cells[i][1]] = 1; // Mark cells from the given list as blocked\n        }\n\n        queue<pair<int, int>> q;\n        \n        for (int i = 1; i <= n; i++) {\n            if (grid[1][i] == 0) {\n                q.push({1, i}); // Start BFS from the top row\n                grid[1][i] = 1; // Mark the cell as visited\n            }\n        }\n        while (!q.empty()) {\n            pair<int, int> p = q.front();\n            q.pop();\n            int r = p.first, c = p.second; // Current cell coordinates\n            for (auto d : directions) {\n                int nr = r + d.first, nc = c + d.second; // Neighbor cell coordinates\n                if (nr > 0 && nc > 0 && nr <= m && nc <= n && grid[nr][nc] == 0) {\n                    grid[nr][nc] = 1; // Mark the neighbor cell as visited\n                    if (nr == m) {\n                        return true; // Found a path to the bottom row\n                    }\n                    q.push({nr, nc}); // Add the neighbor cell to the queue for further exploration\n                }\n            }\n        }\n        return false; // Unable to find a path to the bottom row\n    }\n\n    int latestDayToCross(int row, int col, vector<vector<int>>& cells) {\n        int left = 0, right = row * col, latestPossibleDay = 0;\n        while (left < right - 1) {\n            int mid = left + (right - left) / 2; // Calculate the mid-day\n            if (isPossible(row, col, mid, cells)) {\n                left = mid; // Update the left pointer to search in the upper half\n                latestPossibleDay = mid; // Update the latest possible day\n            } else {\n                right = mid; // Update the right pointer to search in the lower half\n            }\n        }\n        return latestPossibleDay;\n    }\n};"}