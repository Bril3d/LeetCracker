{"problemName":"reverse-odd-levels-of-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* reverseOddLevels(TreeNode* root) {\n        queue<TreeNode*> q;\n        q.push(root);\n        int level = 0;\n        while(!q.empty()){\n            int n = q.size();\n            vector<TreeNode*> arr;\n            for(int i = 0; i < n; i++){\n                auto f = q.front();\n                arr.push_back(f);\n                q.pop();\n            }\n            if(level%2){\n                for(int i = 0; i < n/2; i++){\n                    swap(arr[i]->val, arr[n -i -1]->val);\n                }\n            }\n            for(int i = 0; i < n; i++){\n                auto f = arr[i];\n                if(f->left != NULL)q.push(arr[i]->left);\n                if(f->right != NULL)q.push(arr[i]->right);\n            }\n            level++;\n        }\n        return root;\n    }\n};"}