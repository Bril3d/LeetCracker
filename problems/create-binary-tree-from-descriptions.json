{"problemName":"create-binary-tree-from-descriptions","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {\n        map<int, TreeNode*> m;\n        map<int, int> child;\n        for(auto i : descriptions){\n            int p = i[0], c = i[1], l = i[2];\n            if(m[p] == NULL){\n                m[p] = new TreeNode(p);\n            }\n            if(m[c] == NULL){\n                m[c] = new TreeNode(c);\n            }\n            child[c]++;\n            if(l == 1){\n                m[p]->left = m[c];\n            }else{\n                m[p]->right = m[c];\n            }\n        }\n        for(auto i : m){\n            if(child[i.first] == 0){\n                return i.second;\n            }\n        }\n        return NULL;\n    }\n};"}