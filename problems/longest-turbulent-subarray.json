{"problemName":"longest-turbulent-subarray","language":"cpp","code":"class Solution {\npublic:\n    int maxTurbulenceSize(vector<int>& arr) {\n        int n = arr.size();\n        int dp[n + 1][2];\n        \n        \n        //dp[i][0] for 1st case\n        //dp[i][1] is for second case\n        \n       for(int i = 0; i < n; i++) {\n           for(int  j = 0; j < 2; j++) {\n               dp[i][j] = 1;\n           }\n       }\n        for(int i = 1; i < n; i++) {\n            if(i & 1) {\n                if(arr[i] > arr[i - 1]) {\n                    dp[i][0] = 1 + dp[i - 1][0];\n                }\n                else if(arr[i] < arr[i - 1]) {\n                    dp[i][1] = 1 + dp[i -1][1];\n                }\n                else {\n                    \n                }\n            }\n            else {\n                if(arr[i] > arr[i - 1]) {\n                    dp[i][1] = 1 + dp[i - 1][1];\n                }\n                else if(arr[i] < arr[i - 1]) {\n                    dp[i][0] = 1 + dp[i - 1][0];\n                }\n                else {\n                    // dp[i][0] = dp[i - 1][0];\n                    // dp[i][1] = dp[i - 1][1];\n                }\n                \n            }\n        }\n        \n        int ans = 0;\n        for(int i = 0;  i < n; i++) {\n            ans = max(ans, dp[i][0]);\n            ans = max(ans, dp[i][1]);\n        }\n        return ans;\n    }\n};"}