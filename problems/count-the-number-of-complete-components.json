{"problemName":"count-the-number-of-complete-components","language":"cpp","code":"class Solution {\npublic:\n    void dfs(vector<map<int, int>> &adj, vector<int> &vis, vector<int> &temp, int i){\n        vis[i] = 1;\n        temp.push_back(i);\n        for(auto it : adj[i]){\n            if(!vis[it.first]){\n                dfs(adj, vis, temp, it.first);\n            }\n        }\n    }\n    int countCompleteComponents(int n, vector<vector<int>>& edges) {\n        vector<map<int, int>> adj(n);\n        for(auto i : edges){\n            adj[i[0]][i[1]]++;\n            adj[i[1]][i[0]]++;\n        }\n        int ans = 0;\n        vector<int> vis(n, 0);\n        for(int i = 0; i < n; i++){\n            if(!vis[i]){\n                vector<int> temp;\n                dfs(adj, vis, temp, i);\n                // for(auto i : temp){\n                //     cout<<i<<\" \";\n                // }\n                // cout<<endl;\n                int f = 1;\n                for(int i = 0; i < temp.size(); i++){\n                    for(int j = i + 1; j < temp.size(); j++){\n                        if(adj[temp[i]][temp[j]] == 0){\n                            f = 0;\n                        }\n                    }\n                }\n                if(f == 1){\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n};"}