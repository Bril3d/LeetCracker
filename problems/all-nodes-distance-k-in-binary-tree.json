{"problemName":"all-nodes-distance-k-in-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nunordered_map<TreeNode *,TreeNode *> umap;\nclass Solution {\npublic:\n    void helper(TreeNode *root, int distance, vector<int> &ans, unordered_map<TreeNode *, int> visited){\n        if(root == NULL)return;\n        if(visited[root] == 1){\n            return;\n        }\n        visited[root] = 1;\n        if(distance == 0){\n            ans.push_back(root->val);\n            return;\n        }        \n        helper(root->left, distance - 1, ans, visited);\n        helper(root->right, distance - 1, ans, visited);\n        helper(umap[root], distance - 1, ans, visited);\n        \n    }\n    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {\n        \n        queue<TreeNode*> q;\n        q.push(root);\n        q.push(NULL);\n        umap[root] = NULL;\n        while(!q.empty()){\n            TreeNode *front = q.front();\n            q.pop();\n            if(front == NULL){\n                if(!q.empty())q.push(NULL);\n            }else{\n                if(front->left!=NULL){\n                    umap[front->left] = front;\n                    q.push(front->left);\n                }\n                \n                if(front->right!=NULL){\n                    umap[front->right] = front;\n                    q.push(front->right);\n                }\n            }\n        }\n        \n        vector<int> ans;\n        unordered_map<TreeNode *, int> visited;\n        helper(target, k, ans, visited);\n        return ans;        \n    }\n};"}