{"problemName":"maximum-sum-of-two-non-overlapping-subarrays","language":"cpp","code":"class Solution {\npublic:\n    int dp[1001][3][3];\n    int helper(vector<int>& nums,int i, int firstLen, int secondLen,vector<int> &prefix) {\n        if(!firstLen&&!secondLen) return 0;\n        if(i>=nums.size()){\n            return 0;\n        }\n        \n        if(dp[i][!firstLen==0][!secondLen==0]!=-1) return dp[i][!firstLen==0][!secondLen==0];\n        int ans=0;\n        if(firstLen){\n                if(i+firstLen-1<nums.size()){\n                    ans=max({ans,prefix[i+firstLen]-prefix[i]+helper(nums,i+firstLen,0,secondLen,prefix),helper(nums,i+1,firstLen,secondLen,prefix)});\n                }else{\n                     ans=max({ans,helper(nums,i+1,firstLen,secondLen,prefix)});\n                }\n            \n        }else{\n                if(i+secondLen-1<nums.size()){\n                    ans=max({ans,prefix[i+secondLen]-prefix[i]+helper(nums,i+secondLen,0,0,prefix),helper(nums,i+1,0,secondLen,prefix)});\n                }else{\n                     ans=max({ans,helper(nums,i+1,0,secondLen,prefix)});\n                }\n        }\n        \n        return dp[i][!firstLen==0][!secondLen==0]=ans;\n    }\n    \n    int maxSumTwoNoOverlap(vector<int>& nums, int firstLen, int secondLen) {\n        vector<int> prefix(nums.size()+1,0);\n        for(int i=0;i<nums.size();i++){\n            prefix[i+1]=nums[i]+prefix[i];\n        }\n        memset(dp,-1,sizeof(dp));\n        int ans=helper(nums,0,firstLen,secondLen,prefix);\n        memset(dp,-1,sizeof(dp));\n        ans=max(ans,helper(nums,0,secondLen,firstLen,prefix));\n        return ans;\n        \n    }\n};"}