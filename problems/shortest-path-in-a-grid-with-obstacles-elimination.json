{"problemName":"shortest-path-in-a-grid-with-obstacles-elimination","language":"cpp","code":"class Solution {\npublic:\n    \n  int solve(vector<vector<int>>& grid,int k){\n        vector<vector<int>> vis(grid.size(),vector<int>(grid[0].size(),-1));\n        queue<vector<int>> q;\n\t\n        q.push({0,0,0,k});\n        while(!q.empty()){\n            auto t=q.front();\n            int x=t[0],y=t[1];\n            q.pop();\n\t\t\t\n\t\t\t// Exit if current position is outside of the grid\n            if(x<0 || y<0 || x>=grid.size() || y>=grid[0].size()){\n                continue;\n            }\n\t\t\t\n\t\t\t// Destination found\n            if(x==grid.size()-1 && y==grid[0].size()-1)\n                return t[2];\n\n            if(grid[x][y]==1){\n                if(t[3]>0)\n                    t[3]--;\n                else\n                    continue;\n            }\n\t\t\t\n\n            if(vis[x][y]!=-1 && vis[x][y]>=t[3])\n                continue;\n            vis[x][y]=t[3];\n            \n            q.push({x+1,y,t[2]+1,t[3]});\n            q.push({x,y+1,t[2]+1,t[3]});\n            q.push({x-1,y,t[2]+1,t[3]});\n            q.push({x,y-1,t[2]+1,t[3]});\n            \n        }\n        return -1;\n    }\n    \n    int shortestPath(vector<vector<int>>& grid, int k) {\n        return solve(grid,k);\n    }\n};"}