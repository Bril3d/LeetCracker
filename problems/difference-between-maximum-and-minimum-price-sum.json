{"problemName":"difference-between-maximum-and-minimum-price-sum","language":"python3","code":"class Solution:\n    def maxOutput(self, n: int, edges: List[List[int]], price: List[int]) -> int:\n        tree = [[] for _ in range(n)]\n        for u, v in edges: \n            tree[u].append(v)\n            tree[v].append(u)\n        \n        def dfs(u, p): \n            \"\"\"Return \"\"\"\n            nonlocal ans\n            include = [] # include leaf value \n            exclude = [] # exclude leaf value\n            for v in tree[u]:\n                if v != p: \n                    x, y = dfs(v, u)\n                    include.append((x+price[u], v))\n                    exclude.append((y+price[u], v))\n            if not include: \n                include = [(price[u], u)]\n                exclude = [(0, u)]\n            if len(include) == 1: ans = max(ans, include[0][0] - price[u], exclude[0][0])\n            else: \n                include.sort(reverse=True)\n                for e, v in exclude: \n                    if v != include[0][1]: cand = e + include[0][0] - price[u]\n                    else: cand = e + include[1][0] - price[u]\n                    ans = max(ans, cand)\n            return include[0][0], max(exclude)[0]\n        \n        ans = 0 \n        dfs(0, -1)\n        return ans "}