{"problemName":"number-of-longest-increasing-subsequence","language":"cpp","code":"class Solution {\npublic:\n    \n    int findNumberOfLIS(vector<int>& nums) {\n        int n = nums.size();\n        int dp[n + 1];\n        for(int i = 0; i < n; i++) {\n            dp[i] = 1;\n        }\n        \n        unordered_map<int, int> cnt;\n        for(int i = 0; i < n; i++) {\n            cnt[i] = 1;\n        }\n        \n        for(int i = 1; i < n; i++) {\n            for(int j = 0; j < i; j++) {\n                if(nums[j] < nums[i]) {\n                    if(1 + dp[j] > dp[i]) {\n                        dp[i] = 1 + dp[j]; \n                        cnt[i] = cnt[j];\n                    }\n                    else if(1 + dp[j] == dp[i]) {\n                        cnt[i] += cnt[j];\n                    }\n                }\n            }\n        }\n        \n        int mx = 1;\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            mx = max(mx, dp[i]);\n        }\n        for(int i = 0; i < n; i++) {\n            if(dp[i] == mx) {\n                ans += cnt[i];\n            }\n            \n        }\n        return ans;\n    }\n};"}