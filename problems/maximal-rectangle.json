{"problemName":"maximal-rectangle","language":"cpp","code":"class Solution {\npublic:\n    int largestRectangleArea(vector<int>& heights) {\n        int n = heights.size();\n        vector<int> left(n, -1);\n        stack<int> st;\n        for(int i = n-1; i >= 0;i--){\n            while(!st.empty() && heights[st.top()] > heights[i]){\n                left[st.top()] = i;\n                st.pop();\n            }\n            st.push(i);\n        }\n        while(!st.empty())st.pop();\n        vector<int> right(n, n);\n        for(int i = 0; i < n;i++){\n            while(!st.empty() && heights[st.top()] > heights[i]){\n                right[st.top()] = i;\n                st.pop();\n            }\n            st.push(i);\n        }\n        int ans = 0;\n        for(int i = 0; i < n ; i++){\n            int len = right[i] - left[i] - 1;\n            ans = max(ans, len * heights[i]);\n        }\n        return ans;\n        \n    }\n    int maximalRectangle(vector<vector<char>>& arr) {\n        vector<vector<int>> matrix(arr.size(), vector<int>(arr[0].size(), 0));\n        for(int i = 0 ; i < matrix.size();i++){\n            for(int j = 0; j < matrix[0].size();j++){\n                matrix[i][j] = arr[i][j] - '0';\n            }\n        }\n        for(int i = 1 ; i < matrix.size();i++){\n            for(int j = 0; j < matrix[0].size();j++){\n                if(matrix[i][j] !=  0){\n                    matrix[i][j] = matrix[i-1][j] + 1;\n                }else{\n                    matrix[i][j] = 0;\n                }\n            }            \n        }\n        // for(int i = 0 ; i < matrix.size();i++){\n        //     for(int j = 0; j < matrix[0].size();j++){\n        //         cout<<matrix[i][j]<<' ';\n        //     }\n        //     cout<<endl;\n        // }\n        int ans = 0;\n        for(int i = 0 ; i < matrix.size();i++){\n            ans = max(ans, largestRectangleArea(matrix[i]));           \n        }\n        return ans;\n    }\n};"}