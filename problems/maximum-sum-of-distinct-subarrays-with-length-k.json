{"problemName":"maximum-sum-of-distinct-subarrays-with-length-k","language":"cpp","code":"class Solution {\npublic:\n    long long maximumSubarraySum(vector<int>& nums, int k) {\n        int i = 0, j = 0;\n        map<int, int> mp;\n        long long sum = 0, ans = 0;\n        while(j < k){\n            sum += nums[j];\n            mp[nums[j]]++;\n            j++;\n        }\n        if(mp.size() == k){\n            ans = max(ans, sum);\n        }\n        while(j < nums.size()){\n            sum += nums[j];\n            mp[nums[j]]++;\n            sum -= nums[i];\n            mp[nums[i]]--;\n            if(mp[nums[i]] == 0)mp.erase(nums[i]);\n            i++;\n            j++;\n            if(mp.size() == k){\n                ans = max(ans, sum);\n            }\n        }\n        return ans;\n    }\n};"}