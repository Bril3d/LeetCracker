{"problemName":"find-duplicate-subtrees","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n class Solution {\npublic:\n    // Serialize subtrees and check for duplicates using a post-order traversal\n    string serializeSubtrees(TreeNode* node, unordered_map<string, int>& subtrees, vector<TreeNode*>& duplicates) {\n        if (!node) return \"#\"; // Null nodes are represented by '#'\n        \n        string left = serializeSubtrees(node->left, subtrees, duplicates);\n        string right = serializeSubtrees(node->right, subtrees, duplicates);\n        \n        string s = left + \",\" + right + \",\" + to_string(node->val); // Serialize the current subtree\n        \n        if (subtrees[s] == 1) duplicates.push_back(node); // If a duplicate subtree is found, add to the vector\n        \n        subtrees[s]++;\n        return s;\n    }\n vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {\n        unordered_map<string, int> subtrees; // Store serialized subtree and its frequency\n        vector<TreeNode*> duplicates; // Store duplicate subtrees\n        \n        serializeSubtrees(root, subtrees, duplicates); // Traverse the tree and serialize subtrees\n        \n        return duplicates;\n    }\n    \n};"}