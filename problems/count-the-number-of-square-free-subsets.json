{"problemName":"count-the-number-of-square-free-subsets","language":"cpp","code":"const int MOD = 1e9 + 7;\ntypedef long long int ll;\n\nll dp[1005][1 << 11];\n\nclass Solution\n{\npublic:\n    ll getMask(ll n, vector<ll> &div)\n    {\n        ll mask = 0;\n        for (ll i = 0; i < div.size(); i++)\n        {\n\n            ll cnt = 0;\n            while (n % div[i] == 0)\n            {\n                cnt++;\n                n /= div[i];\n            }\n            if (cnt > 1)\n                return -1;\n            if (cnt == 1)\n                mask = (mask | (1 << (i + 1)));\n        }\n        return mask;\n    }\n    ll helper(vector<int> &arr, ll ind, vector<ll> &div, ll prod)\n    {\n        if (ind == arr.size())\n        {\n            return 1;\n        }\n        if (dp[ind][prod] != -1)\n            return dp[ind][prod];\n        ll take = 0;\n        ll prodMask = getMask(arr[ind], div);\n\n        if (prodMask != -1 && (prodMask & prod) == 0)\n        {\n            take = helper(arr, ind + 1, div, (prod | prodMask)) % MOD;\n        }\n        ll notTake = helper(arr, ind + 1, div, prod) % MOD;\n        return dp[ind][prod] = (take + notTake) % MOD;\n    }\n    ll squareFreeSubsets(vector<int> &nums)\n    {\n        memset(dp, -1, sizeof(dp));\n        vector<ll> div = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n        return (helper(nums, 0, div, 1) - 1 + MOD) % MOD;\n    }\n};"}