{"problemName":"maximum-sum-circular-subarray","language":"cpp","code":"class Solution {\npublic:\n    int maxSubarraySumCircular(vector<int>& nums) {\n        vector<int> prefix(nums.begin(), nums.end()), suffix(nums.begin(), nums.end());\n\n        int n = nums.size();\n        for(int i = 1; i < n; i++) {\n            prefix[i] += prefix[i - 1];\n\n        }\n        for(int i = n - 2; i >= 0; i--) \n        {\n            suffix[i] += suffix[i + 1];\n        }\n\n        for(int i = 1; i < n; i++) {\n            prefix[i] = max(prefix[i], prefix[i- 1]);\n\n        }\n\n        for(int i = n - 2; i >= 0; i--) {\n            suffix[i] = max(suffix[i], suffix[i + 1]);\n        }\n        \n        int ans = INT_MIN;\n        for(int i = 0; i < n - 1; i++) {\n            ans = max(ans, prefix[i] + suffix[i + 1]);\n        }\n\n        int curr = 0;\n        for(auto i : nums) {\n            curr = i + max(curr, 0);\n            ans = max(ans, curr);\n        }\n\n        return ans;\n    }\n};"}