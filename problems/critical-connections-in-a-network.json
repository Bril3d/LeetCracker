{"problemName":"critical-connections-in-a-network","language":"cpp","code":"class Solution {\npublic:\n     vector<vector<int>> ans;\n    \n    void eval_node_value(int parent,int curr_ver,unordered_map<int,vector<int>>& adjLis,unordered_map<int,int>& node_val,int &count){\n        \n        node_val[curr_ver]=++count;\n        int val=node_val[curr_ver];\n        for(auto ngh:adjLis[curr_ver]){\n            if(parent==ngh) continue;\n            if(!node_val.count(ngh)){\n                eval_node_value(curr_ver,ngh,adjLis,node_val,count);\n            }\n            node_val[curr_ver]=min(node_val[curr_ver],node_val[ngh]);\n            \n            if(val<node_val[ngh]){\n                ans.push_back({curr_ver,ngh});\n            }\n        }\n        \n    }\n    // void fillAns(unordered_map<int,vector<int>>& adjLis,unordered_map<int,int>& node_val){\n    //     set<vector<int>> st;\n    //     for(auto node:adjLis){\n    //         for(auto ngh:adjLis[node.first]){\n    //             if(node_val[node.first]<node_val[ngh]){\n    //                 vector<int> temp={node.first,ngh};\n    //                 sort(begin(temp),end(temp));\n    //                 st.insert(temp);\n    //             }\n    //         }\n    //     }\n    //     for(auto elm:st){\n    //         ans.push_back(elm);\n    //     }\n    // }\n    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {\n        unordered_map<int,vector<int>> adjLis;\n        unordered_map<int,int> node_val;\n        for(auto elm: connections){\n            adjLis[elm[0]].push_back(elm[1]);\n            adjLis[elm[1]].push_back(elm[0]);\n        }\n        int count=0;\n        eval_node_value(-1,0,adjLis,node_val,count);\n        // fillAns(adjLis,node_val);\n        return ans;\n        \n    }\n};"}