{"problemName":"maximize-score-after-n-operations","language":"cpp","code":"int dp[(1<<15)][15][15];\nclass Solution {\npublic:\n    int helper(vector<int> &nums, int mask, int prev, int op){\n        if(dp[mask][prev + 1][op] != -1)return dp[mask][prev + 1][op];\n        int ans = 0;\n        for(int i = 0; i < nums.size(); i++){\n            int tk = 0;\n            if((mask & (1<<i)) == 0){\n                if(prev == -1){\n                    tk = helper(nums, (mask | (1 << i)), i, op);\n                }else{\n                    tk = op * __gcd(nums[i], nums[prev]) + helper(nums, (mask | (1 << i)), -1, op + 1);\n                }\n            }\n            ans = max(ans, tk);\n        }\n        return dp[mask][prev + 1][op] = ans;\n    }\n    int maxScore(vector<int>& nums) {\n        memset(dp, -1, sizeof dp);\n        return helper(nums, 0, -1, 1);   \n    }\n};"}