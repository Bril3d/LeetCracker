{"problemName":"step-by-step-directions-from-a-binary-tree-node-to-another","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* junctionNode;\n    vector<bool> findJnode(TreeNode* root, int startValue, int destValue){\n        if(!root) return {0,0,0};\n        \n        bool first=0,sec=0;\n        if(root->val==startValue) first=1;\n        else if(root->val==destValue) sec=1;\n        \n        auto leftP=findJnode(root->left,startValue,destValue);\n        auto rightP=findJnode(root->right,startValue,destValue);\n        \n        if(leftP[2]||rightP[2]) return {0,0,1};\n        \n        bool finalFirst=leftP[0]|rightP[0]|first;\n        bool finalSecond=leftP[1]|rightP[1]|sec;\n        \n        if(finalFirst&&finalSecond){\n            \n            junctionNode=root;\n            return {1,1,1};\n        }\n        \n        return {finalFirst,finalSecond,0};\n        \n    }\n    \n    bool findPath(TreeNode* root, int val,string &s){\n        if(!root) return 0;\n        if(root->val==val) return 1;\n        \n        \n        bool left=findPath(root->left,val,s);\n        bool right=findPath(root->right,val,s);\n        \n        if(left){\n            s.push_back('L');\n            return 1;\n        }\n        if(right){\n            s.push_back('R');\n            return 1;\n        }\n        return 0;\n    }\n    string getDirections(TreeNode* root, int startValue, int destValue) {\n        \n        findJnode(root,startValue,destValue);\n        \n        string s1,s2;\n        \n        findPath(junctionNode,startValue,s1);\n        findPath(junctionNode,destValue,s2);\n        \n        string ans;\n        for(auto i:s1) ans.push_back('U');\n        reverse(begin(s2),end(s2));\n        \n        return ans+s2;\n    }\n};"}