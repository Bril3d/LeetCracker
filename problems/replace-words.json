{"problemName":"replace-words","language":"cpp","code":"class TrieNode{\npublic:\n    bool wordEnd;\n    vector<TrieNode*> arr;\n    TrieNode(){\n        wordEnd = false;\n        arr.assign(26, NULL);\n    }\n};\nclass Trie{\npublic:\n    TrieNode *root;\n    Trie(){\n        root = new TrieNode();\n    }\n    void add(string &s){\n        TrieNode *temp = root;\n        for(auto i : s){\n            if(temp->arr[i - 'a'] == NULL){\n                temp->arr[i - 'a'] = new TrieNode();\n            }\n            temp = temp->arr[i - 'a'];\n        }\n        temp->wordEnd = true;\n    }\n    string prefix(string &s){\n        TrieNode *temp = root;\n        string str = \"\";\n        for(auto i : s){\n            if(temp->wordEnd)return str;\n            if(temp->arr[i-'a'] == NULL)break;\n            temp = temp->arr[i - 'a'];\n            str.push_back(i);\n        }\n        return s;\n    }\n};\n\nclass Solution {\npublic:\n    string replaceWords(vector<string>& dictionary, string sentence) {\n        Trie *trie = new Trie();\n        for(auto i : dictionary){\n            trie->add(i);\n        }\n        vector<string> arr;\n        string temp = \"\";\n        for(auto i :  sentence){\n            if(i == ' '){\n                arr.push_back(temp);\n                temp = \"\";\n            }else{\n                temp.push_back(i);\n            }\n        }\n        if(temp != \"\")arr.push_back(temp);\n\n        string ans = \"\";\n        for(auto i : arr){\n            ans += trie->prefix(i);\n            ans.push_back(' ');\n        }\n        ans.pop_back();\n        return ans;\n    }\n};"}