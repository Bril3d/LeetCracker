{"problemName":"minimum-amount-of-time-to-collect-garbage","language":"cpp","code":"class Solution {\npublic:\n    int garbageCollection(vector<string>& garbage, vector<int>& travel) {\n        int n = garbage.size();\n        vector<int> p(n, 0), m(n, 0), g(n, 0);\n        for(int i = 0; i <garbage.size(); i++){\n            for(auto j : garbage[i]){\n                if(j == 'G')g[i]++;\n                if(j == 'M')m[i]++;\n                if(j == 'P')p[i]++;\n            }\n        }\n        for(int i = 1; i < n; i ++){\n            p[i] += p[i  - 1];\n            m[i] += m[i  - 1];\n            g[i] += g[i  - 1];\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++){\n            \n            ans += p[i];\n            if(i > 0)ans-=p[i - 1];\n            if(p[i] == p.back())break;\n            if(i == n - 1)break;\n            ans += travel[i];\n        }\n        for(int i = 0; i < n; i++){\n            \n            ans += m[i];\n            if(i > 0)ans-=m[i - 1];\n            if(m[i] == m.back())break;\n            if(i == n - 1)break;\n            ans += travel[i];\n        }\n        for(int i = 0; i < n; i++){\n            \n            ans += g[i];\n            if(i > 0)ans-=g[i - 1];\n            if(g[i] == g.back())break;\n            if(i == n - 1)break;\n            ans += travel[i];\n        }\n        return ans;\n        \n    }\n};"}