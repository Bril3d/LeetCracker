{"problemName":"letter-tile-possibilities","language":"cpp","code":"class Solution {\npublic:\n    unordered_set<string> st;\n    int fact(int n) {\n        int res = 1;\n        for(int i=1;i<=n;i++) {\n            res *= i;\n        }\n        return res;\n    }\n    \n    int uniqueperm(string s) {\n        vector<int> v(26, 0);\n        for(auto ch : s) {\n            v[ch - 'A']++;\n        }\n        int n = s.length();\n        \n        \n        int x = fact(n);\n        for(auto i : v) {\n            if(i >= 2)\n            x /= fact(i);\n        }\n        \n        return x;\n        \n    }\n    \n    int solve(string s, string out = \"\", int pos = 0) {\n        //base case\n        if(pos >= s.length()) {\n           if(st.count(out) == 0) {\n               st.insert(out);\n               return uniqueperm(out);\n           }\n            return 0;\n        }\n        //recursive  case\n        \n        return solve(s, out, pos + 1) + solve(s, out + s[pos],pos + 1);\n    }\n \n    int numTilePossibilities(string tiles) {\n        sort(tiles.begin(), tiles.end());\n        \n        return solve(tiles)-1;\n    }\n};"}