{"problemName":"number-of-provinces","language":"cpp","code":"class Solution {\npublic:\n    void dfs(vector<vector<int>> &adj, vector<int> &vis, int curr){\n        vis[curr] = 1;\n        for(auto i : adj[curr]){\n            if(!vis[i])dfs(adj, vis, i);\n        }\n    }\n    int findCircleNum(vector<vector<int>>& isConnected) {\n        int n = isConnected.size();\n        vector<vector<int>> adj(n);\n        for(int i = 0; i < isConnected.size(); i++){\n            for(int j = 0; j < isConnected.size(); j++){\n                if(isConnected[i][j] == 0)continue;\n                adj[i].push_back(j);\n                adj[j].push_back(i);\n            }\n        }\n        vector<int> vis(n, 0);\n        int ans = 0;\n        for(int i = 0; i<n; i++){\n            if(!vis[i]){\n                ans++;\n                dfs(adj, vis, i);\n            }\n        }\n        return ans;\n    }\n};"}