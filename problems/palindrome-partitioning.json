{"problemName":"palindrome-partitioning","language":"cpp","code":"class Solution {\npublic:\n    void helper(vector<vector<string>> &ans, vector<string> &arr, vector<vector<bool>> &dp, string &s,int ind){\n        if(ind == s.length()){\n            ans.push_back(arr);\n            return;\n        }\n        string temp = \"\";\n        for(int i = ind; i<s.length();i++){\n            temp.push_back(s[i]);\n            if(dp[ind][i]){\n                arr.push_back(temp);\n                helper(ans, arr, dp, s, i + 1);\n                arr.pop_back();\n            }\n        }\n    }\n    vector<vector<string>> partition(string s) {\n        vector<vector<bool>> dp(s.length(), vector<bool>(s.length(), false));\n        int n = s.length();\n        for(int i  = 0; i < n;i++)dp[i][i] = true;\n        for(int i = 0; i < n - 1;i++)\n            if(s[i] == s[i + 1]) dp[i][i + 1] = true;\n        for(int i = n - 1; i >=0 ; i --){\n            for(int j = i + 2; j < n;j++){\n                if(s[i] == s[j] && dp[i+1][j-1])\n                    dp[i][j] = true;\n            }\n        }\n        // for(auto i : dp){\n        //     for(auto j : i){\n        //         cout<<j<<\" \";\n        //     }\n        //     cout<<endl;\n        // }\n        vector<vector<string>> ans;\n        vector<string> arr;\n        helper(ans, arr, dp, s, 0);\n        return ans;\n    }\n};"}