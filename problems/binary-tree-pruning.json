{"problemName": "binary-tree-pruning", "language": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : /**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int sum(TreeNode *root){\n        if(root == NULL){\n            return 0;\n        }\n        int left = sum(root->left);\n        int right = sum(root->right);\n        if(left == 0){\n            root->left = NULL;\n        }\n        if(right == 0){\n            root->right = NULL;\n        }\n        int sum = left + right + root->val;\n        return sum;\n    }\n    TreeNode* pruneTree(TreeNode* root) {\n        int _sum = sum(root);\n        if(_sum == 0){\n            return NULL;\n        }\n        return root;\n    }\n};"}