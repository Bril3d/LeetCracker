{"problemName":"word-search-ii","language":"cpp","code":"class Solution\n{\npublic:\n    struct Node\n    {\n        Node *links[26];\n        bool flag = false;\n        bool containsKey(char key)\n        {\n            return links[key - 'a'];\n        }\n        bool hasEnd()\n        {\n            return flag;\n        }\n        Node *getNode(char key)\n        {\n            return links[key - 'a'];\n        }\n        void put(char key)\n        {\n            links[key - 'a'] = new Node();\n        }\n        void setEnd()\n        {\n            flag = true;\n        }\n        void removeEnd()\n        {\n            flag = false;\n        }\n    };\n\n    Node *root = new Node();\n\n    void insert(string word)\n    {\n        Node *p = root;\n\n        for (char &key : word)\n        {\n            if (!p->containsKey(key))\n            {\n                p->put(key);\n            }\n            p = p->getNode(key);\n        }\n        p->setEnd();\n    }\n\n    vector<vector<int>> visited;\n    vector<string> ans;\n\n    void s(vector<vector<char>> &board, string &word, int i, int j, Node *p)\n    {\n\n        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || visited[i][j] == 1 || (!p->containsKey(board[i][j]))) return;\n\n        word += board[i][j];\n        p = p->getNode(board[i][j]);\n\n        if (p->hasEnd())\n        {\n            p->removeEnd();\n            ans.push_back(word);\n        }\n\n        visited[i][j] = 1; \n        s(board, word, i, j + 1, p); s(board, word, i, j - 1, p); s(board, word, i - 1, j, p);  s(board, word, i + 1, j, p); \n        visited[i][j] = 0;\n\n        word.pop_back();\n    }\n\n    vector<string> findWords(vector<vector<char>> &board, vector<string> &words)\n    {\n        visited = vector<vector<int>>(board.size(), vector<int>(board[0].size(), 0));\n        for (auto &ss : words) insert(ss); \n        Node *p = root;\n        string word; \n        for (int i = 0; i < board.size(); i++) for (int j = 0; j < board[0].size(); j++) s(board, word, i, j, p); \n        return ans;\n    }\n};"}