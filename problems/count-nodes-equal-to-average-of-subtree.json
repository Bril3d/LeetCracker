{"problemName":"count-nodes-equal-to-average-of-subtree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int find(TreeNode * root) \n    {\n        if(!root) {\n            return 0;\n        }\n        return 1 + find(root->left) + find(root->right);\n    }\n    int cnt(TreeNode * root) {\n        if(!root) {\n            return 0;\n        }\n        if(!root->left and !root->right) {\n            return 1;\n        }\n        int  res =  cnt(root->left) + cnt(root->right);\n        int p = root->val;\n        if(root->left) {\n            p += root->left->val;\n        }\n        if(root->right) \n        {\n            p += root->right->val;\n        }\n        int h = p / (find(root));\n       \n        \n        if(root->val == h) {\n             root->val = p;\n            cout << root->val << \" \";\n            return 1 + res;\n        }\n             root->val = p;\n        cout << root->val << \" \";\n            return res;\n        \n        \n    }\n    int averageOfSubtree(TreeNode* root) {\n        return cnt(root);\n    }\n};"}