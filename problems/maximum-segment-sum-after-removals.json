{"problemName":"maximum-segment-sum-after-removals","language":"cpp","code":"typedef long long int ll;\nclass Solution {\npublic:\n    vector<long long> maximumSegmentSum(vector<int>& nums, vector<int>& removeQueries) {\n        vector<ll> pre(nums.begin(), nums.end());\n        ll n = nums.size();\n        for (ll i = 1; i < pre.size(); i++)\n        {\n            pre[i] += pre[i - 1];\n        }\n        vector<ll> ans;\n        multiset<ll> mst;\n        set<pair<ll, ll>> st;\n        st.insert({n - 1, 0});\n        mst.insert(pre[n - 1]);\n        mst.insert(0);\n        for (auto i : removeQueries)\n        {\n            pair<ll, ll> p = {i, 0};\n             auto t = st.lower_bound( p);\n            ll r = t->first;\n            ll l = t->second;\n            ll s1 = pre[r];\n            if (l - 1 >= 0)\n                s1 -= pre[l - 1];\n            st.erase(t);\n            mst.erase(mst.find(s1));\n            if (i < r)\n            {\n                st.insert({r, i + 1});\n                ll s = pre[r];\n                if (i >= 0)\n                    s -= pre[i];\n                mst.insert(s);\n            }\n            if (i > l)\n            {\n                st.insert({i - 1, l});\n                ll s = pre[i - 1];\n                if (l - 1 >= 0)\n                    s -= pre[l - 1];\n                mst.insert(s);\n            }\n            ans.push_back(*mst.rbegin());\n        }\n        return ans;\n    }\n};"}