{"problemName":"pseudo-palindromic-paths-in-a-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool check(vector<int>  &arr){\n        int o = 0;\n        for(auto i : arr){\n            if(i%2 == 1)o++;\n        }\n        return o <= 1;\n    }\n    int helper(TreeNode *root, vector<int> &arr){\n        if(root == NULL) return 0;\n        if(root->left == NULL && root->right == NULL){\n            arr[root->val]++;\n            int ans = check(arr);\n            arr[root->val]--;\n            return ans;\n        }\n        arr[root->val]++;\n        int ans = helper(root->left, arr);\n        ans += helper(root->right, arr);\n        arr[root->val]--;\n        return ans;\n    }\n    int pseudoPalindromicPaths (TreeNode* root) {\n        vector<int> arr(10, 0);\n        return helper(root, arr);\n    }\n};"}