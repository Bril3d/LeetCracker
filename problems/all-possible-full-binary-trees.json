{"problemName":"all-possible-full-binary-trees","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode * > find(int s, int e) {\n        if(s == e) {\n            return {new TreeNode(0)};\n        }\n\n        if(s > e) {\n            return {nullptr};\n        }\n        vector<TreeNode*> ans;\n        for(int k = s; k <= e; k++) {\n            if((k - s) % 2 == 1 and (e - k)%2 == 1) {\n                vector<TreeNode*> left = find(s, k - 1);\n                vector<TreeNode*> right = find(k + 1, e);\n\n\n                for(auto l : left) {\n                    for(auto r : right) {\n                        auto node = new TreeNode(0);\n                        node->left = l;\n                        node->right = r;\n                        ans.push_back(node);\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n\n    vector<TreeNode*> allPossibleFBT(int n) {\n        return find(1, n);\n    }\n};"}