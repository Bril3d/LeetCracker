{"problemName":"snakes-and-ladders","language":"cpp","code":"class Solution {\n    void getCoordinate(int n,int s, int &row, int &col){\n        row = n-1-(s-1)/n;\n        col = (s-1)%n;\n        if((n%2==1 && row%2==1)||(n%2==0 && row%2==0))\n            col = n-1-col;\n    }\npublic:\n    int snakesAndLadders(vector<vector<int>>& board) {\n        int n = board.size();\n        vector<bool> seen(n*n+1,false);\n\t\tseen[1] = true;\n        queue<pair<int,int>> q;\n\t\tq.push({1,0});\n        while(!q.empty()){\n            pair<int,int> p = q.front();q.pop();\n            int row,col,s = p.first, dist = p.second;\n            if(s == n*n)\n                return dist;\n            for(int i=1;s+i<=n*n && i<=6;i++){                \n                getCoordinate(n,s+i,row,col);\n                int sfinal = board[row][col]==-1?s+i:board[row][col]; // check for snake or ladder\n                if(seen[sfinal]==false){\n                    seen[sfinal] = true;\n                    q.push({sfinal,dist+1});\n                }                \n            }\n        }\n        return -1;\n    }\n};"}