{"problemName":"shortest-path-to-get-all-keys","language":"cpp","code":"class Solution {\npublic:\n    int n,m,keys;\n    int dx[4] = {1,-1,0,0};\n    int dy[4] ={0,0,1,-1};\n    int shortestPathAllKeys(vector<string>& g) {\n        queue<pair<pair<int,int>,int>>q;\n        n=g.size();\n        m=g[0].size();\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n            if(g[i][j]=='@')q.push({{i,j},0});\n            if(g[i][j]>='a' && g[i][j]<='z')keys++;\n        }\n        }\n        int check = (1<<keys)-1;\n        map<pair<pair<int,int>,int>,int>p;\n        int ans=0;\n        while(q.size()){\n            int k=q.size();\n            for(int i=0;i<k;i++){\n                auto j = q.front();q.pop();\n                int x = j.first.first;\n                int y = j.first.second;\n                int mask = j.second;\n                if(mask==check)return ans;\n                for(int h=0;h<4;h++){\n                    int nx = x + dx[h];\n                    int ny = y + dy[h];\n                    if(nx>=0 && ny>=0 && ny<m && nx<n && g[nx][ny]!='#'){\n                        if(g[nx][ny]>='a' && g[nx][ny]<='z'){\n                            int n_mask = mask | (1<<(g[nx][ny]-'a'));\n                            if(p.find({{nx,ny},n_mask})==p.end()){\n                                p[{{nx,ny},n_mask}]=n_mask;\n                                q.push({{nx,ny},n_mask});\n                            }\n                        }\n                        else if(g[nx][ny]>='A' && g[nx][ny]<='Z'){\n                            int c = g[nx][ny]-'A';\n                            if((mask & (1<<c)) == 0)continue;\n                            int n_mask = mask;\n                            if(p.find({{nx,ny},n_mask})==p.end()){\n                               p[{{nx,ny},n_mask}]=n_mask;\n                                q.push({{nx,ny},n_mask});\n                            }\n                        }\n                        else{\n                            int n_mask = mask;\n                            if(p.find({{nx,ny},n_mask})==p.end()){\n                                p[{{nx,ny},n_mask}]=n_mask;\n                                q.push({{nx,ny},n_mask});\n                            }\n                        }\n                    }\n                }\n            }\n            ans++;\n        }\n        return -1;\n    }\n};"}