{"problemName":"minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix","language":"cpp","code":"class Solution {\npublic:\n    vector<int> d4 = {-1, 0, 1, 0, -1};\n    int helper(vector<vector<int>> &mat, int x, int y){\n        if(y == mat[0].size()) y = 0,x++;\n        if(x == mat.size()){\n            int c = 0;\n            for(auto i : mat)for(auto j : i)c += (j == 1);\n            if(c == 0)return 0;\n            else return 1e6;\n        }\n        int nt = 0 + helper(mat, x, y + 1);\n        mat[x][y] = 1 - mat[x][y];\n        for(int i = 0; i < 4; i++){\n            int _x = x + d4[i], _y = y + d4[i + 1];\n            if(_x >= 0 && _x < mat.size() && _y >= 0 && _y < mat[0].size()){\n                mat[_x][_y] = 1 - mat[_x][_y];\n            }\n        }\n\n        int tk = 1 + helper(mat, x, y + 1);\n        //\n        mat[x][y] = 1 - mat[x][y];\n        for(int i = 0; i < 4; i++){\n            int _x = x + d4[i], _y = y + d4[i + 1];\n            if(_x >= 0 && _x < mat.size() && _y >= 0 && _y < mat[0].size()){\n                mat[_x][_y] = 1 - mat[_x][_y];\n            }\n        }\n        return min(nt, tk);\n    }\n    int minFlips(vector<vector<int>>& mat) {\n        int ans = helper(mat, 0, 0);\n        if(ans >= 1e6)return -1;\n        return ans;\n    }\n};"}