{"problemName":"minimum-path-cost-in-a-grid","language":"cpp","code":"class Solution {\npublic:\n    int dp[105][105];\n    \n    int dfs(vector<vector<int>>& g, vector<vector<int>>& m, int i, int j) {\n        // cout << \"i \" << i << endl;\n        if(i + 1 == g.size()) {\n            return g[i][j];\n        }\n        if(dp[i][j] != -1) {\n            return dp[i][j];\n        }\n        int ans = INT_MAX / 2;\n        for(int k = 0; k < g[0].size(); k++) {\n            \n                ans  = min(ans, m[g[i][j]][k] + g[i][j] + dfs(g, m, i + 1, k));\n        }\n        return dp[i][j] =  ans;\n    }\n    int minPathCost(vector<vector<int>>& grid, vector<vector<int>>& moveCost) {\n        memset(dp, -1, sizeof dp);\n        int ans = INT_MAX / 2;\n        for(int i = 0; i < grid[0].size(); i++) {\n            ans = min(ans, dfs(grid, moveCost, 0, i));\n        }\n        return ans;\n    }\n};"}