{"problemName":"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance","language":"cpp","code":"class Solution {\npublic:\n    unordered_map<int,vector<vector<int>>> umap;\n    int helper(int dt,int src,int n){\n        vector<int> costs(n,INT_MAX);\n        set<vector<int>> st;\n        costs[src]=0;\n        st.insert({0,src});\n        while(st.size()){\n            vector<int> tp=*(st.begin());\n            st.erase(tp);\n            int node=tp[1];\n            int cost=tp[0];\n            for(auto ngh:umap[node]){\n                int temp=cost+ngh[1];\n                if(temp<costs[ngh[0]]){\n                    auto itr=st.find({costs[ngh[0]],ngh[0]});\n                    if(itr!=st.end()){\n                        st.erase(itr);\n                    }\n                    st.insert({temp,ngh[0]});\n                    costs[ngh[0]]=temp;\n                }\n            }\n        }\n        int count=0;\n        for(int i=0;i<n;i++){\n            if(i!=src&&costs[i]<=dt) count++;\n        }\n        return count;\n    }\n    static bool cmp(vector<int> &a,vector<int> &b){\n        return (a[0]<b[0]||(a[0]==b[0]&&a[1]>b[1]));\n    }\n    int findTheCity(int n, vector<vector<int>>& edges, int dt) {\n        for(auto it:edges){\n            umap[it[0]].push_back({it[1],it[2]});\n            umap[it[1]].push_back({it[0],it[2]});\n        }\n        vector<vector<int>> vec;\n        for(int i=0;i<n;i++){\n            vec.push_back({helper(dt,i,n),i});\n        }\n        sort(begin(vec),end(vec),cmp);\n        return vec[0][1];\n    }\n};"}