{"problemName":"balanced-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map<TreeNode*,int> umap;\n    int calHeight(TreeNode *root){\n         if(root== NULL)return 0;\n        return umap[root] = max(calHeight(root->left),calHeight(root->right)) + 1;\n    }\n    bool helper(TreeNode* root) {\n        if(root == NULL)return true;\n        if(abs(umap[root->left] - umap[root->right]) <= 1){\n            return (helper(root->left) && helper(root->right));\n        }else{\n            return false;\n        }\n    }\n    bool isBalanced(TreeNode* root) {\n       calHeight(root);\n        return helper(root);\n    }\n};"}