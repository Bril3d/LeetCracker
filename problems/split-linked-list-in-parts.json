{"problemName":"split-linked-list-in-parts","language":"cpp","code":"class Solution {\npublic:\n    \n    int solve(ListNode* head) {\n        int cnt = 0;\n        while(head) {\n            head  = head->next;\n            cnt++;\n        }\n        return cnt;\n    }\n    vector<ListNode*> splitListToParts(ListNode* root, int k) {\n        vector<ListNode*> parts(k, nullptr);\n        int len = solve(root);\n        // for (ListNode* node = root; node; node = node->next)\n        //     len++;\n        int n = len / k, r = len % k; // n : minimum guaranteed part size; r : extra nodes spread to the first r parts;\n        ListNode* node = root, *prev = nullptr;\n        for (int i = 0; node && i < k; i++, r--) {\n            parts[i] = node;\n            for (int j = 0; j < n + (r > 0); j++) {\n                prev = node;\n                node = node->next;\n            }\n            prev->next = nullptr;\n        }\n        return parts;\n    }\n};\n"}