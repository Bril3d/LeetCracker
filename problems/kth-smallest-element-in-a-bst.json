{"problemName":"kth-smallest-element-in-a-bst","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int ans = INT_MIN;\n    void helper(TreeNode *root, int &k){\n        if(root == NULL  || ans != INT_MIN)return;\n        helper(root->left, k);\n        cout<<root->val<<\", \"<<k<<\" : \";\n        k--;\n        if(k == 0){\n                ans = root->val;\n        }\n        helper(root->right, k);\n    }\n    int kthSmallest(TreeNode* root, int k) {\n        helper(root, k);\n        return ans;       \n    }\n};"}