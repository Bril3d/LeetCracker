{"problemName":"maximum-number-of-non-overlapping-palindrome-substrings","language":"cpp","code":"class Solution {\npublic:\n    bool dp[2005][2005];\n    int dp2[2005];\n    int k = 0;\n    int helper(string &s, int ind){\n        if(ind >= s.length())return 0;\n        if(dp2[ind] != -1)return dp2[ind];\n        int nt = helper(s, ind + 1);\n        int t = 0;\n        for(int i = ind + k - 1; i < s.length(); i++){\n            if(dp[ind][i]){\n                t = max(t, 1 + helper(s, i + 1));\n            }\n        }\n        return dp2[ind] = max(nt, t);\n    }\n    int maxPalindromes(string s, int K) {\n        memset(dp, false, sizeof dp);\n        memset(dp2, -1, sizeof dp2);\n        k = K;\n        int n = s.length();\n        for(int i = 0; i <n; i++){\n            dp[i][i] = true;\n        }\n        for(int i = 0; i < n - 1; i++){\n            if(s[i] == s[i + 1]){\n                dp[i][i + 1] = true;\n            }\n        }\n        for(int i = n - 2; i >=0; i--){\n            for(int j = 1; j < n; j++){\n                if(s[i] == s[j] && dp[i + 1][j - 1])dp[i][j] = true;\n            }\n        }\n        return helper(s, 0);\n    }\n};"}