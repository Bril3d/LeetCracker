{"problemName":"maximum-total-importance-of-roads","language":"cpp","code":"class Solution {\npublic:\n   static bool cmp(pair<int,long long> &x,pair<int,long long> &y){\n        return x.second<y.second;\n    }\n    long long dfs(unordered_map<int,vector<int>>& adj,int curr,unordered_map<int,bool> &vis,unordered_map<int,long long> &val,int par_val){\n        vis[curr]=1;\n        // cout<<curr<<\"->\"<<val[curr]<<\",\"<<par_val<<\" \";\n        long long ans=0;\n        if(par_val!=-1)\n            ans=val[curr]+par_val;\n        \n        for(auto ngh:adj[curr]){\n            if(!vis[ngh]){\n                ans+=dfs(adj,ngh,vis,val,val[curr]);\n            }else{\n                // cout<<curr<<\"->\"<<val[ngh]<<\",\"<<val[curr]<<\" \";\n                ans+=val[curr]+val[ngh];}\n        }\n        return ans;\n    }\n    long long maximumImportance(int n, vector<vector<int>>& roads) {\n        unordered_map<int,long long> umap;\n        unordered_map<int,vector<int>> adj;\n        for(auto i:roads){\n            adj[i[0]].push_back(i[1]);\n            adj[i[1]].push_back(i[0]);\n            \n            umap[i[0]]++;\n            umap[i[1]]++;\n        }\n        vector<pair<int,long long>> vec;\n        for(auto i:umap){\n            vec.push_back({i.first,i.second});\n        }\n        sort(vec.begin(),vec.end(),cmp);\n        int k=n;\n        unordered_map<int,long long> val;\n        for(int i=vec.size()-1;i>=0;i--){\n            val[vec[i].first]=k;\n            k--;\n        }\n        long long ans=0;\n        unordered_map<int,bool> vis;\n        for(auto i:adj){\n            if(!vis[i.first]){\n                ans+=dfs(adj,i.first,vis,val,-1);\n            }\n        }\n        // cout<<endl;\n        return ans/2;\n    }\n};"}