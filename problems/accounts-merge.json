{"problemName":"accounts-merge","language":"cpp","code":"class DisjointSet{\n    public:\n    vector<int> parent,rank;\n    DisjointSet(int n){\n        parent.resize(n+1);\n        rank.resize(n+1,0);\n        for(int i =0;i<=n;i++){\n            parent[i]=i;\n        }\n    }\n    int findpar(int node){\n        if(node==parent[node]){\n            return node;\n        }\n        return parent[node]=findpar(parent[node]);\n    }\n    void union_by_rank(int u,int v){\n        int ulp = findpar(u);\n        int vlp = findpar(v);\n        if(ulp==vlp){\n            return;\n        }\n        if(rank[ulp]<rank[vlp]){\n            parent[ulp]=vlp;\n\n        }else if(rank[vlp]<rank[ulp]){\n            parent[vlp]=ulp;\n        }else{\n            parent[vlp]=ulp;\n            rank[ulp]++;\n        }\n    }\n};\nclass Solution {\npublic:\n    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {\n       int n = accounts.size();\n       DisjointSet ds(n);\n       unordered_map<string,int> mp;\n       for(int i =0;i<n;i++){\n           for(int j =1;j<accounts[i].size();j++){//excluding name\n           string mail = accounts[i][j];\n           if(mp.find(mail)==mp.end()){\n               mp[mail]=i;\n           }else{\n               ds.union_by_rank(i,mp[mail]);\n           }\n\n           }\n       }\n       vector<string> mergedmail[n];\n       for(auto it:mp) {\n           string mail = it.first;\n           int node = ds.findpar(it.second);\n           mergedmail[node].push_back(mail);\n\n       }\n       vector<vector<string>> ans;\n       for(int i =0;i<n;i++){\n           if(mergedmail[i].size()==0){\n               continue;//for those of the ndoes who does have ultiparent\n           }\n           sort(mergedmail[i].begin(),mergedmail[i].end());\n           vector<string> temp;\n           temp.push_back(accounts[i][0]);\n           for(auto it:mergedmail[i]){\n               temp.push_back(it);\n           }\n           ans.push_back(temp);\n       }\n       return ans;\n    }\n};"}