{"problemName":"vertical-order-traversal-of-a-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\nbool cmpr(pair<int,int> &a, pair<int,int> &b){\n    if(a.second < b.second){\n        return true;\n    }else if(a.second > b.second){\n        return false;\n    }else{\n        return a.first < b.first;\n    }\n}\nclass Solution {\npublic:\n    vector<vector<int>> verticalTraversal(TreeNode* root) {\n        queue<pair<TreeNode*, int>> q;\n        q.push({root, 0});\n        q.push({NULL, -1});\n        vector<vector<pair<TreeNode*,int>>> ans;\n        vector<pair<TreeNode*,int>> ds;\n        while(!q.empty()){\n            pair<TreeNode*,int> front = q.front();\n            q.pop();\n            if(front.first == NULL){\n                ans.push_back(ds);\n                ds.clear();\n                if(!q.empty()){\n                    q.push({NULL, -1});\n                }\n            }else{\n                ds.push_back(front);\n                if(front.first->left != NULL){\n                    q.push({front.first->left, front.second - 1});\n                }\n                \n                if(front.first->right != NULL){\n                    q.push({front.first->right, front.second + 1});\n                }\n            }\n        }\n        //val, level\n        map<int, vector<pair<int,int>>> umap;\n        for(int i=0;i<ans.size();i++){\n            for(auto j : ans[i]){\n                umap[j.second].push_back({j.first->val, i});\n            }\n        }\n        vector<vector<int>> ans2;\n        for(auto &i : umap){\n            sort(i.second.begin(), i.second.end(), cmpr);\n            vector<int> temp;\n            for(auto j : i.second){\n                temp.push_back(j.first);\n                // cout<<j.first<<\" \"<<j.second<<\" : \";\n            }\n            // cout<<endl;\n           ans2.push_back(temp);\n        }\n        return ans2;\n    }\n};"}