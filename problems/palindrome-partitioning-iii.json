{"problemName":"palindrome-partitioning-iii","language":"cpp","code":"int dp[105][105];\nclass Solution {\npublic:\n    int f(string &s)\n    {\n        int c = 0;\n        for (int j = 0; j < s.length() / 2; j++)\n        {\n            if (s[j] != s[s.length() - j - 1])\n                c++;\n        }\n        return c;\n    }\n    int helper(string &s, int ind, int k)\n    {\n        if (ind == s.length() && k == 0)\n        {\n            return 0;\n        }\n        if (k <= 0)\n            return 1e9;\n        if (dp[ind][k] != -1)\n            return dp[ind][k];\n        string temp = \"\";\n        int ans = 1e9;\n        for (int i = ind; i < s.length(); i++)\n        {\n            temp.push_back(s[i]);\n            ans = min(ans, f(temp) + helper(s, i + 1, k - 1));\n        }\n        return dp[ind][k] = ans;\n    }\n    int palindromePartition(string s, int k)\n    {\n        memset(dp, -1, sizeof dp);\n        vector<string> arr;\n        return helper(s, 0, k);\n    }\n};"}