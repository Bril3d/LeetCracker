{"problemName":"remove-invalid-parentheses","language":"cpp","code":"class Solution {\npublic:\n    unordered_map<string, int> ans;\n    int _min = INT_MAX;\n    bool isCorrect(string &s){\n        stack<char> st;\n        for(auto i : s){\n            if(i == '('){\n                st.push(i);\n            }else if(i == ')'){\n                if(st.empty())return false;\n                st.pop();\n            }\n        }\n        return st.empty();\n    }\n    int incorrect(string &s){\n        stack<char> st;\n        int ans = 0;\n        for(auto i : s){\n            if(i == '('){\n                st.push(i);\n            }else if(i == ')'){\n                if(st.empty())\n                    ans++;\n                else\n                    st.pop();\n            }\n        }\n        ans += st.size();\n        return ans;\n    }\n    void helper(string &s, string &temp, int ind, int removed){\n        if(removed < 0)return;\n        if(ind == s.length()){\n            if(removed == 0 && isCorrect(temp)){\n                ans[temp]++;\n            }\n            return;\n        }\n        if(s[ind] == '(' || s[ind] == ')'){\n            helper(s, temp, ind + 1, removed - 1);\n        }\n        temp.push_back(s[ind]);\n        helper(s, temp, ind + 1, removed);\n        temp.pop_back();\n    }\n    vector<string> removeInvalidParentheses(string s) {\n        ans.clear();\n        string temp = \"\";\n        int invalid = incorrect(s);\n        helper(s, temp, 0, invalid);\n        \n        vector<string> st;\n        for(auto i : ans){\n             st.push_back(i.first);\n        }\n        return st;\n    }\n};"}