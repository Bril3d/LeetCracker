{"problemName":"find-median-from-data-stream","language":"cpp","code":"class MedianFinder {\npublic:\n    priority_queue<int> left;\n    priority_queue<int, vector<int>, greater<int>> right;\n    MedianFinder() {        \n    }\n    \n    void addNum(int num) {\n        if(left.empty() || left.top() > num){\n            left.push(num);\n        }else{\n            right.push(num);\n        }\n        if(left.size() > right.size() + 1){\n            right.push(left.top());\n            left.pop();\n        }\n        if(right.size() > left.size() + 1){\n            left.push(right.top());\n            right.pop();\n        }\n    }\n    \n    double findMedian() {\n        if(right.size() == left.size()){\n            return (right.top() + left.top())/2.0;\n        }else{\n            if(right.size() > left.size()){\n                return right.top() * 1.0;\n            }else{\n                return left.top() * 1.0;\n            }\n        }\n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */"}