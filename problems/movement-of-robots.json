{"problemName":"movement-of-robots","language":"python3","code":"class Solution:\n    def sumDistance(self, nums: List[int], s: str, d: int) -> int:\n        n, m = len(nums), int(1e9 + 7)\n        # Ignore the Collisions\n        for i in range(n):\n            if s[i] == 'L':\n                nums[i] -= d\n            else: \n                nums[i] += d\n        \n        # Sort according to position to calculate abs sum of each pair in O(N)\n        nums.sort()\n\n        pre = nums.copy()\n        # Calculate Prefix Sum\n        for i in range(1, n):\n            pre[i] += pre[i - 1]\n            pre[i] %= m\n\n        ans = 0\n        for i in range(1, n):\n            # each jth index contributes to j * nums[j] - pre[j - 1]\n            ans += i * nums[i] - pre[i - 1]\n            ans %= m\n        return ans\n        "}