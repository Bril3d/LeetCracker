{"problemName":"minimize-the-total-price-of-the-trips","language":"cpp","code":"class Solution {\npublic:\n    vector<int> used;\n    int dp[55][55][2];\n    bool helper2(vector<vector<int>> &adj, vector<int>  &vis, vector<int> &path, int curr, int end){\n        vis[curr] = 1;\n        path.push_back(curr);\n        if(curr == end) return true;\n        for(auto i : adj[curr]){\n            if(!vis[i]){\n                if(helper2(adj, vis, path, i, end))return true;\n            }\n        }\n        path.pop_back();\n        return false;\n    }\n    void helper(vector<vector<int>> &adj, int start, int end){\n        vector<int> path;\n        vector<int> vis(adj.size(), 0);\n        helper2(adj, vis, path, start, end);\n        for(auto i : path){\n            used[i]++;\n        }\n    }\n    int helper3(vector<vector<int>> &adj, int curr, int parent, bool canTake)\n    {\n        if(dp[curr][parent + 1][canTake] != -1)return dp[curr][parent + 1][canTake];\n        int ans1 = used[curr] / 2, ans2 = used[curr], c = 0;\n        for (auto i : adj[curr])\n        {\n            if (i != parent)\n            {\n                if (canTake)\n                {\n                    ans1 += helper3(adj, i, curr, false);\n                }\n                ans2 += helper3(adj, i, curr, true);\n                c++;\n            }\n        }\n        if (canTake)\n            return dp[curr][parent + 1][canTake] = min(ans1, ans2);\n        else\n            return dp[curr][parent + 1][canTake] = ans2;\n    }\n    int minimumTotalPrice(int n, vector<vector<int>>& edges, vector<int>& price, vector<vector<int>>& trips) {\n        used.assign(n, 0);\n        memset(dp, -1, sizeof dp);\n        vector<vector<int>> adj(n);\n        map<pair<int, int>, int> mp;\n        for(auto i : edges){\n            adj[i[0]].push_back(i[1]);\n            adj[i[1]].push_back(i[0]);\n        }\n        for(auto i : trips){\n            helper(adj, i[0], i[1]);\n        }\n        for(int i = 0; i < n;i++){\n            used[i] *= price[i];\n        }\n        return helper3(adj, 0, -1, true);\n    }\n};"}