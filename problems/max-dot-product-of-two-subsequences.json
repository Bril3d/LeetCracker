{"problemName":"max-dot-product-of-two-subsequences","language":"cpp","code":"class Solution {\npublic:\nint dp[505][505];\n\n    int find(vector<int> &nums1, vector<int> &nums2, int i, int j) {\n        if(i == nums1.size() || j == nums2.size()) {\n            return 0;\n        }\n        if(dp[i][j] != -1) return dp[i][j];\n        int op1 = (nums1[i] * nums2[j]) + find(nums1, nums2, i + 1, j + 1);\n        int op2 = find(nums1, nums2, i + 1, j );\n        int op3 = find(nums1, nums2, i, j + 1);\n        return dp[i][j] =  max({op1, op2,  op3});\n    }\n    int maxDotProduct(vector<int>& nums1, vector<int>& nums2) {\n        memset(dp, -1, sizeof dp);\n        int ans = INT_MIN;\n        for(int i = 0; i < nums1.size(); i++) {\n            for(int j = 0; j < nums2.size(); j++) {\n                ans = max(ans, (nums1[i] * nums2[j]) + find(nums1, nums2, i + 1, j + 1));\n            }\n        }\n\n        return ans;\n\n    }\n};"}