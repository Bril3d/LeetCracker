{"problemName":"continuous-subarrays","language":"cpp","code":"class Solution {\npublic:\n    long long continuousSubarrays(vector<int>& nums) {\n        multiset<int> mst;\n        int i = 0, j = -1, n = nums.size();\n        long long ans = 0;\n        while(j < n - 1){\n            int _min, _max;\n            while(1){\n                j++;\n                if(j == n){\n                    break;\n                }\n                mst.insert(nums[j]);\n                _min = *mst.begin();\n                _max = *mst.rbegin();\n                if(abs(_max - _min) > 2){\n                    break;\n                }\n                ans += (j - i + 1);\n            }\n            if(j == n)break;\n            // ans += ((j - i) * (j - i - 1))/2;\n            while(i < j && abs(_max - _min) > 2){\n                mst.erase(mst.find(nums[i]));\n                i++;\n                _min = *mst.begin();\n                _max = *mst.rbegin();\n            }\n            ans += (j - i + 1);\n            // cout<<i<<\" \"<<j<<\" \"<<ans<<endl;\n        }\n        return ans;\n    }\n};"}