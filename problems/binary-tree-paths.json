{"problemName": "binary-tree-paths", "language": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : /**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void helper(TreeNode *root, vector<string> &ans, vector<int> &ds){\n        if(root == NULL){\n            return;\n        }\n        ds.push_back(root->val);\n        helper(root->left, ans, ds);\n        helper(root->right, ans, ds);\n        \n        if(!root->left && !root->right){\n            string s = \"\";\n            for(int i = 0;i<ds.size();i++){\n                s.append(to_string(ds[i]));\n                if(i != ds.size() - 1){\n                    s.append(\"->\");\n                }\n            }\n            ans.push_back(s);\n        }\n        ds.pop_back();\n    }\n    vector<string> binaryTreePaths(TreeNode* root) {\n        vector<string> ans;\n        vector<int> ds;\n        helper(root, ans, ds);\n        return ans;\n    }\n};"}