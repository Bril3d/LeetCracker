{"problemName":"add-one-row-to-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode *addOneRow(TreeNode *root, int val, int depth)\n    {\n        if(depth == 1){\n            TreeNode *root2 = new TreeNode(val);\n            root2->left = root;\n            return root2;\n        }\n        queue<TreeNode *> q;\n        q.push(root);\n        vector<vector<TreeNode *>> arr;\n\n        int level = 1;\n        while (!q.empty())\n        {\n            int n = q.size();\n            vector<TreeNode *> temp;\n\n            for (int i = 0; i < n; i++)\n            {\n                TreeNode *front = q.front();\n                q.pop();\n                if (level == depth)\n                {\n                    break;\n                }\n                temp.push_back(front);\n                if (front->left)\n                    q.push(front->left);\n                if (front->right)\n                    q.push(front->right);\n            }\n            if (level == depth)\n            {\n                break;\n            }\n            arr.push_back(temp);\n            level++;\n        }\n        for (auto i : arr[arr.size() - 1])\n        {\n            TreeNode *temp = i->left;\n            i->left = new TreeNode(val);\n            i->left->left = temp;\n            //\n            temp = i->right;\n            i->right = new TreeNode(val);\n            i->right->right = temp;\n        }\n        return root;\n    }\n\n};"}