{"problemName":"global-and-local-inversions","language":"cpp","code":"class Solution {\npublic:\n    vector<long> bit;\n    long n;\n    bool isIdealPermutation(vector<int>& nums) {\n        n = nums.size();\n        bit.assign(n + 1, 0);\n        long g = 0;\n        for(long i = 0; i < nums.size() ;i ++){\n            g += sum(n) - sum(nums[i]);\n            update(nums[i] + 1, 1);\n        }\n        long l = 0;\n        for(long i = 0; i < n-1; i++){\n            if(nums[i] > nums[i + 1]){\n                l ++;\n            }\n        }\n        // cout<<g<<\" : \"<<l<<endl;\n        return g == l;\n    }\n    void update(long i, long val){\n        while(i <= n){\n            bit[i] += val;\n            i += (i & (-i));\n        }\n    }\n    long sum(long i){\n        long ans = 0;\n        while(i > 0){\n            ans += bit[i];\n            i -= (i & (-i)); \n        }\n        return ans;\n    }\n};"}