{"problemName":"second-minimum-node-in-a-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void helper(TreeNode *root){\n        if(root->left && root->right){\n            root->val = min(root->left->val, root->right->val);\n            helper(root->left);\n            helper(root->right);\n        }else{\n            return;\n        }\n    }\n    set<int> p;\n    void inorder(TreeNode *root){\n        if(root == NULL) return;\n        inorder(root->left);\n        p.insert(root->val);\n        inorder(root->right);\n    }\n    int findSecondMinimumValue(TreeNode* root) {\n        helper(root);\n        inorder(root);\n        p.erase(p.begin());\n        if(p.size() == 0){\n            return -1;\n        }else{\n            return *p.begin();\n        }\n    }\n};"}