{"problemName":"minimum-falling-path-sum","language":"cpp","code":"class Solution {\npublic:\n    \n    long long helper(vector<vector<int>> &matrix, int x, int y, vector<vector<long long>> &dp){\n        if(y< 0 || y>=matrix[0].size())return INT_MAX;\n        if(x == matrix.size())return 0;\n        if(dp[x][y] != INT_MIN)return dp[x][y];\n        \n        long long ans = min(helper(matrix, x + 1, y - 1, dp),\n                            min(helper(matrix, x + 1, y, dp),\n                                helper(matrix, x + 1, y + 1, dp)))\n                        + matrix[x][y];\n        return dp[x][y] = ans;\n    }\n    int minFallingPathSum(vector<vector<int>>& matrix) {\n        \n        vector<vector<long long>> dp(matrix.size(), vector<long long>(matrix[0].size(), INT_MIN));\n        long long ans = 1e15;\n        for(int i = 0; i < matrix[0].size();i++){\n            ans = min(ans, helper(matrix, 0, i, dp));\n        }\n        return ans;\n    }\n};"}