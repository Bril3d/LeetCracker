{"problemName":"remove-max-number-of-edges-to-keep-graph-fully-traversable","language":"cpp","code":"\nclass Solution {\npublic:\n    int find(vector<int> &ds, int i) {\n        return ds[i] < 0 ? i : ds[i] = find(ds, ds[i]);\n    }\n    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {\n        vector<int> ds_both(n + 1, -1);\n        int used = 0;\n        for (int type = 3; type > 0; --type) {\n            auto ds_one = ds_both;\n            auto &ds = type == 3 ? ds_both : ds_one;\n            for (auto &e : edges)\n                if (e[0] == type) {\n                    int i = find(ds, e[1]), j = find(ds, e[2]);\n                    if (i != j) {\n                        ++used;\n                        if (ds[j] < ds[i])\n                            swap(i, j);\n                        ds[i] += ds[j];\n                        ds[j] = i;\n                    }\n                }\n            if (type != 3 && ds[find(ds, 1)] != -n)\n                return -1;\n        }\n        return edges.size() - used;\n    }\n};"}