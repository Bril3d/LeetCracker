{"problemName":"make-k-subarray-sums-equal","language":"cpp","code":"class Solution {\npublic:\n   long long find(vector<int>&A, int n)\n{\n    long long cost = 0;\n\n    sort(A.begin(), A.end());\n\n    long long K = A[n / 2];\n\n    for (int i = 0; i < n; ++i)\n        cost += abs(A[i] - K);\n\n    if (n % 2 == 0) {\n        long long tempCost = 0;\n\n        K = A[(n / 2) - 1];\n\n        for (int i = 0; i < n; ++i)\n            tempCost += abs(A[i] - K);\n\n        cost = min(cost, tempCost);\n    }\n\n    return cost;\n}\n    long long makeSubKSumEqual(vector<int>& arr, int k) {\n        long long n=arr.size();\n        if(__gcd(n,(long long)k)==1){\n            return find(arr,n);\n        }\n        else{\n            long long result=0;\n            for(int i=0;i<__gcd(n,(long long)k);i++){\n                vector<int>v1;\n                for(int j=i;j<arr.size();j+=__gcd(n,(long long)k))\n                    v1.push_back(arr[j]);\n                result+=find(v1,v1.size());\n            }\n            return result;\n        }\n        return 0;\n    }\n};"}