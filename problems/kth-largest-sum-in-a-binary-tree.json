{"problemName":"kth-largest-sum-in-a-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    long long kthLargestLevelSum(TreeNode* root, int k) {\n        vector<long long> arr;\n        queue<TreeNode *> q;\n        q.push(root);\n        while(!q.empty()){\n            int n = q.size();\n            long long sum = 0;\n            for(int i = 0; i < n;i++){\n                TreeNode *front = q.front();\n                q.pop();\n                sum += front->val;\n                if(front->left != NULL)q.push(front->left);\n                if(front->right != NULL)q.push(front->right);\n            }\n            arr.push_back(sum);\n        }\n        sort(arr.begin(), arr.end(), greater<long long>());\n        if(k > arr.size()){\n            return -1;\n        }\n        return arr[k-1];\n    }\n};"}