{"problemName":"jump-game-iv","language":"cpp","code":"class Solution {\npublic:\n    int minJumps(vector<int>& arr) {\n        int n = arr.size();\n        unordered_map<int, vector<int>>mp;\n        for (int i = 0; i < n; i++) mp[arr[i]].push_back(i);\n        \n        queue<int>q;\n        vector<bool>visited(n, false);\n        q.push(0);\n        int steps = 0;\n        while(!q.empty())\n        {\n            int size = q.size();\n            while(size--)\n            {\n                int currIdx = q.front();\n                q.pop();\n                if (currIdx == n - 1) return steps;\n                //================================================================\n                //EXPLORE ALL POSSIBLE OPTIONS\n                if (currIdx + 1 < n && !visited[currIdx + 1])  //OPTION-1 (Move Forward)\n                {\n                    visited[currIdx + 1] = true;\n                    q.push(currIdx + 1);\n                }\n                if (currIdx - 1 >= 0 && !visited[currIdx - 1]) //OPTION-2 (Move Backward)\n                {\n                    visited[currIdx - 1] = true;\n                    q.push(currIdx - 1);\n                }\n                for (int newIdx : mp[arr[currIdx]])  //OPTION-3 (Move to same valued idx)\n                {                                 //newIdx coud be before currIdx or after currIdx\n                    if (!visited[newIdx]) \n                    {\n                        visited[newIdx] = true;\n                        q.push(newIdx);\n                    }\n                }\n                //===================================================================\n                mp[arr[currIdx]].clear();    //EXPLAINED BELOW :)\n            }\n            steps++;\n        }\n        return -1;\n    }\n};"}