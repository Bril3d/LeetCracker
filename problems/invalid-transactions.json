{"problemName":"invalid-transactions","language":"cpp","code":"class Solution {\npublic:\n    vector<vector<string>> helper(vector<string> s){\n        vector<vector<string>> vec;\n        for(auto i:s){\n            string str=\"\";\n            vector<string> temp;\n            for(auto ii:i){\n                if(ii==','){ \n                    temp.push_back(str);\n                    str=\"\";\n                }\n                else str+=ii;\n            }\n            temp.push_back(str);\n            vec.push_back(temp);\n        }\n        // for(auto i:vec){\n        //     for(auto ii:i){\n        //         cout<<ii<<\" \";\n        //     }\n        //     cout<<endl;\n        // }\n        return vec;\n    }\n    vector<string> invalidTransactions(vector<string>& v) {\n        unordered_map<string,vector<int>> umap;\n        vector<vector<string>> vec=helper(v);\n        for(int i=0;i<vec.size();i++){\n            umap[vec[i][0]].push_back(i);\n        }\n        \n        unordered_set<int> st;\n        auto cmp=[&vec](int i,int j){\n            return stoi(vec[i][1])<stoi(vec[j][1]);\n        };\n        for(auto &i:umap){\n            sort(begin(i.second),end(i.second),cmp);\n            vector<int> temp=i.second;\n            for(int i=0;i<temp.size();i++){\n                for(int j=i+1;j<temp.size();j++){\n                    int a=stoi(vec[temp[i]][1]);\n                    int b=stoi(vec[temp[j]][1]);\n                    if(b-a>60) break;\n                    else if(vec[temp[i]][3]!=vec[temp[j]][3]){\n                        st.insert(temp[i]);\n                        st.insert(temp[j]);\n                    }\n                }\n                if(stoi(vec[temp[i]][2])>1000){\n                     st.insert(temp[i]);\n                }\n            }\n        }\n\n        \n        vector<string> result;\n        for(auto i:st){\n            result.push_back(v[i]);\n        }\n        return result;\n\n\n\n    }\n};"}