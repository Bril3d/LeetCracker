{"problemName":"minimum-cost-to-cut-a-stick","language":"cpp","code":"class Solution {\npublic:\n    int minCost(int n, vector<int>& A) {\n        A.push_back(0);\n        A.push_back(n);\n        sort(begin(A), end(A));\n        int N = A.size();\n        vector<vector<int>> dp(N, vector<int>(N, INT_MAX));\n        for (int i = 0; i < N - 1; ++i) dp[i][i + 1] = 0;\n        for (int i = 0; i < N - 2; ++i) dp[i][i + 2] = A[i + 2] - A[i];\n        for (int len = 4; len <= N; ++len) {\n            for (int i = 0; i <= N - len; ++i) {\n                int j = i + len - 1;\n                for (int k = i + 1; k < j; ++k) dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + A[j] - A[i]);\n            }\n        }\n        return dp[0][N - 1];\n    }\n};"}