{"problemName":"number-of-ways-to-reorder-array-to-get-same-bst","language":"cpp","code":"class Solution {\npublic:\n    vector<vector<long long>> table;\n    long long dfs(vector<int> &nums, long long mod){\n        int n = nums.size();\n        if(n <= 2) return 1;\n        vector<int> left, right;\n        for(int i = 1; i < nums.size(); ++i){\n            if(nums[i] < nums[0]) left.push_back(nums[i]);\n            else right.push_back(nums[i]);\n        }\n        long long left_res = dfs(left, mod) % mod;\n        long long right_res = dfs(right, mod) % mod;\n\t\tint left_len = left.size(), right_len = right.size();\n        return (((table[n - 1][left_len] * left_res) % mod) * right_res) % mod;\n    }\n    int numOfWays(vector<int>& nums) {\n        long long mod = 1e9 + 7;\n\t\tint n = nums.size();\n        table.resize(n + 1);\n        for(int i = 0; i < n + 1; ++i){\n            table[i] = vector<long long>(i + 1, 1);\n            for(int j = 1; j < i; ++j){\n                table[i][j] = (table[i-1][j-1] + table[i-1][j]) % mod;\n            }\n        }\n        long long ans = dfs(nums, mod);\n        return ans % mod - 1;\n    }\n};"}