{"problemName": "binary-tree-tilt", "language": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : /**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int helper(TreeNode *root, unordered_map<TreeNode *,int>  &umap){\n        if(root == NULL) return 0;\n        return umap[root] = helper(root->left, umap) + root->val + helper(root->right, umap);\n    }\n    int helper2(TreeNode *root, unordered_map<TreeNode *,int>  &umap){\n        if(root == NULL) return 0;\n        return abs(umap[root->left] - umap[root->right])\n            + helper2(root->left, umap)\n            + helper2(root->right, umap);\n    }\n    int findTilt(TreeNode* root) {\n        unordered_map<TreeNode *, int> umap;\n        helper(root, umap);\n        return helper2(root, umap);\n    }\n};"}