{"problemName":"longest-palindromic-substring","language":"cpp","code":"class Solution {\npublic:\n    string longestPalindrome(string s)\n{\n    if (s.length() == 1)\n    {\n        string s1 = \"\";\n        s1.push_back(s[0]);\n        return s1;\n    }\n    else if (s.length() == 2)\n    {\n        if (s[0] == s[1])\n        {\n            return s;\n        }\n        else\n        {\n            string s1 = \"\";\n            s1.push_back(s[0]);\n            return s1;\n        }\n    }\n    int dp[s.length()][s.length()];\n    int n = s.length();\n\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n            dp[i][j] = 0;\n        }\n    }\n    int _maxS = 1;\n    int _maxE = 1;\n    for (int i = 0; i < n; i++)\n    {\n        dp[i][i] = 1;\n    }\n    for (int i = 1; i < n; i++)\n    {\n        if (s[i - 1] == s[i])\n        {\n            dp[i - 1][i] = 1;\n            if (2 > (_maxE - _maxS + 1))\n            {\n                _maxS = i - 1;\n                _maxE = i;\n            }\n        }\n    }\n    for (int k = 2; k < n; k++)\n    {\n        for (int j = k, i = 0; j < n; j++, i++)\n        {\n            if (s[i] == s[j] && dp[i + 1][j - 1] == 1)\n            {\n                dp[i][j] = 1;\n                if (j - i + 1 > (_maxE - _maxS + 1))\n                {\n                    _maxS = i;\n                    _maxE = j;\n                }\n            }\n            else\n            {\n                dp[i][j] = 0;\n            }\n        }\n    }\n    string s1;\n    for (int i = _maxS; i <= _maxE; i++)\n    {\n        s1.push_back(s[i]);\n    }\n    return s1;\n}\n};"}