{"problemName":"maximum-profit-in-job-scheduling","language":"cpp","code":"\nclass Solution {\npublic:\n    int memo[50001];\n    int n;\n    //find the first job jiska starting point >= currentJob ka end point\n    int getNextIndex(vector<vector<int>>& array, int l, int currentJobEnd) {\n        int r = n-1;\n        \n        int result = n+1;\n        \n        while(l <= r) {\n            int mid = l + (r-l)/2;\n            \n            if(array[mid][0] >= currentJobEnd) { //we can take this task\n                result = mid;\n                r = mid-1;\n            } else {\n                l = mid+1;\n            }\n        }\n        \n        return result;\n    }\n    \n    int solve(vector<vector<int>>& array, int i) {\n        if(i >= n)\n            return 0;\n        \n        if(memo[i] != -1)\n            return memo[i];\n        \n        int next  = getNextIndex(array, i+1, array[i][1]);\n        \n        int taken = array[i][2] + solve(array, next);\n        int notTaken = solve(array, i+1);\n        \n        return memo[i] = max(taken, notTaken);\n    }\n    \n    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {\n        n = startTime.size();\n        \n        memset(memo, -1, sizeof(memo));\n        \n        vector<vector<int>> array(n, vector<int>(3, 0)); //{s, e, p}\n        \n        for(int i = 0; i<n; i++) {\n            array[i][0] = startTime[i];\n            array[i][1] = endTime[i];\n            array[i][2] = profit[i];\n        }\n        \n        // auto comp = [&](auto& vec1, auto& vec2) {\n        //       return vec1[0] <= vec2[0];\n        // };\n        \n        //sort kardo according to sart time\n        sort(begin(array), end(array));\n        \n        return solve(array, 0);\n    }\n};\n\n"}