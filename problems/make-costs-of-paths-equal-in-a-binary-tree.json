{"problemName":"make-costs-of-paths-equal-in-a-binary-tree","language":"cpp","code":"class Solution {\npublic:\n    void dfs(vector<int> &cost, vector<int> &temp, int ind, int sum){\n        sum += cost[ind];\n        if(2 * ind + 1 >= cost.size()){\n            temp[ind] = sum;\n            return;\n        }\n        dfs(cost, temp, 2 * ind + 1, sum);\n        dfs(cost, temp, 2 * ind + 2, sum);\n        temp[ind] = max(temp[2 * ind + 1], temp[2 * ind + 2]);\n    }\n    int dfs2(vector<int> &temp, int ind, int _max, int diff){\n        if(2 * ind + 1 >= temp.size()){\n            return _max - (temp[ind] + diff);\n        }\n        int _min = temp[ind] + diff;\n        return (_max - _min) + dfs2(temp, 2 *ind + 1, _max, diff + (_max - _min))\n             + dfs2(temp, 2 *ind + 2, _max, diff + (_max - _min));\n    }\n    int minIncrements(int n, vector<int>& cost) {\n        vector<int> temp(cost.size(), 0);\n        dfs(cost, temp, 0, 0);\n        int _max = *max_element(temp.begin(), temp.end());\n        int ans = 0;\n        ans = dfs2(temp, 0, _max, 0);\n        return ans;\n    }\n};"}