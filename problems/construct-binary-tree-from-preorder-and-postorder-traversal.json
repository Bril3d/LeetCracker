{"problemName":"construct-binary-tree-from-preorder-and-postorder-traversal","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map<int,int> um;\n    int idx = 0;\n\n    TreeNode * dfs(vector<int>& preorder, int s, int e, vector<int>& postorder){\n        if(s > e)\n            return NULL;\n        if(s == e)\n            return new TreeNode(preorder[idx++]);\n\n        int pos = um[preorder[idx+1]];\n\n        TreeNode * root = new TreeNode(preorder[idx++]);\n        root->left      = dfs(preorder, s, pos, postorder);\n        root->right     = dfs(preorder, pos+1, e-1, postorder);\n\n        return root;\n    }\n\n    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {\n\n        int pos = postorder.size();\n        for(int i = 0; i<pos; i++)\n            um[postorder[i]] = i;\n\n        return dfs(preorder, 0, pos-1, postorder);\n    }\n};"}