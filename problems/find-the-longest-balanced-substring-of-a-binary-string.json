{"problemName":"find-the-longest-balanced-substring-of-a-binary-string","language":"cpp","code":"class Solution {\npublic:\n    int findTheLongestBalancedSubstring(string s) {\n        int n = s.length();\n        int ans = 0;\n        vector<int> pref(n);\n        for(int i = 0; i < n;i++){\n            pref[i] = s[i] - '0';\n        }\n        for(int i = 1; i < n;i++){\n            pref[i] += pref[i-1];\n        }\n        for(int i = 0; i < n;i++){\n            for(int j = i; j < n;j++){\n                if((j - i + 1)%2 == 0){\n                    int mid = (i + j)/2;\n                    int left = pref[mid];\n                    if(i > 0)\n                        left -= pref[i - 1];\n                    int right = pref[j] - pref[mid];\n                    \n                    if(left == 0 && right == (j - i + 1)/2){\n                        ans = max(ans, 2 * right);\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};"}