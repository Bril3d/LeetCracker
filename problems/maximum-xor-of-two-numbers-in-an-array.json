{"problemName":"maximum-xor-of-two-numbers-in-an-array","language":"cpp","code":"class Node{\n  private:\n    vector<Node *> arr;\npublic:\n    Node(){\n        arr.assign(2, NULL);\n    }\n    bool has(int bit){\n        return arr[bit]!= NULL;\n    }\n    void put(int bit){\n        arr[bit] = new Node();\n    }\n    Node *get(int bit){\n        return arr[bit];\n    }\n};\nclass Trie{\nprivate:\n    Node *root;\npublic:\n    Trie(){\n        root = new Node();\n    }\n    void insert(int n){\n        Node *node = root;\n        for(int i = 31; i >= 0; i--){\n            int bit = (n & (1 << i))?1:0;\n            if(!node->has(bit)){\n                node->put(bit);\n            }\n            node = node->get(bit);            \n        }\n    }\n    int getXOR(int n){\n        Node *node = root;\n        int _xor = 0;\n        for(int i = 31; i >= 0; i--){\n            int bit = (n & (1 << i))?1:0;\n            if(node->has(!bit)){\n                //has opposite bit;\n                node = node->get(!bit);\n                _xor = (_xor | (1<<i));\n            }else{\n                //not has opposite bit;\n                node = node->get(bit); \n            }     \n        }\n        return _xor;\n    }\n};\nclass Solution {\npublic:\n    \n    int findMaximumXOR(vector<int>& nums) {\n        int _max = 0;\n        Trie *trie = new Trie();\n        for(auto i : nums){\n            trie->insert(i);\n        }\n        for(auto i : nums){\n            _max = max(_max, trie->getXOR(i));\n            // cout<<i<<\" : \"<<_max<<endl;\n        }\n        return _max;\n    }\n};"}