{"problemName":"regions-cut-by-slashes","language":"cpp","code":"class Solution {\npublic:\n   int cnt, n;\n   vector<int> f;\n   int regionsBySlashes(vector<string>& grid) {\n        n = grid.size()+1;\n        cnt = 1;\n        for (int i = 0; i < n*n*4 ; ++i)\n            f.push_back(i);\n       for (int i = 1; i <n; ++i) {\n           //  cout<<g(0,i)<<\" \"<<g(0,i-1)<<endl;\n           // cout<<g(n-1,i)<<\" \"<<g(n-1,i-1)<<endl;\n           // cout<<g(i,0)<<\" \"<<g(i-1,0)<<endl;\n           // cout<<g(i,n-1)<<\" \"<<g(i-1,n-1)<<endl;\n              unite(g(0,i),g(0,i-1));\n              unite(g(n-1,i),g(n-1,i-1));\n              unite(g(i,0),g(i-1,0));\n              unite(g(i,n-1),g(i-1,n-1));\n       }\n       \n        for (int i = 0; i < n-1; ++i) {\n            for (int j = 0; j < n-1; ++j) {\n                if (grid[i][j] == '/') {\n                    // cout<<i<<\"-\"<<j<<endl;\n                    int isvalid=unite(g(i , j+1), g(i +1, j));\n                    if(isvalid) cnt++;\n                }\n                 if (grid[i][j] == '\\\\') {\n                    int isvalid=unite(g(i , j), g(i +1, j+1));\n                    if(isvalid) cnt++;\n                }\n            }\n        }\n        return cnt;\n    }\n\n    int find(int x) {\n        if (x != f[x]) {\n            f[x] = find(f[x]);\n        }\n        return f[x];\n    }\n    bool unite(int x, int y) {\n        // cout<<x<<\" \"<<y<<endl;\n        x = find(x); y = find(y);\n        if (x != y) {\n            f[x] = y;\n            return 0;\n        }\n        return 1;\n    }\n    int g(int i, int j) {\n        return (i * n + j);\n    }\n};"}