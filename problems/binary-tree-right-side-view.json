{"problemName":"binary-tree-right-side-view","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> rightSideView(TreeNode* root) {\n        if(root == NULL) return {};\n        queue<TreeNode*> q;\n        q.push(root);\n        q.push(NULL);\n        vector<int> ans;\n        int prev = 0;\n        while(!q.empty()){\n            TreeNode *front = q.front();\n            q.pop();\n            if(front == NULL){\n                // cout<<prev<<endl;\n                ans.push_back(prev);\n                if(!q.empty()){\n                    q.push(NULL);\n                }else{\n                    break;\n                }\n            }else{\n                cout<<front->val<<' ';\n                if(front->left != NULL)\n                    q.push(front->left);\n                \n                if(front->right != NULL)\n                    q.push(front->right);\n                \n                prev = front->val;\n            }\n            \n        }\n        return ans;\n    }\n};"}