{"problemName":"minimum-number-of-operations-to-sort-a-binary-tree-by-level","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int minimumOperations(TreeNode* root) {\n        queue<TreeNode *> q;\n        q.push(root);\n        int ans =0;\n        while(!q.empty()){\n            int n = q.size();\n            vector<int> arr, t;\n            map<int, int> mp;\n            for(int i = 0; i < n; i++){\n                auto f = q.front();\n                q.pop();\n                mp[f->val] = i;\n                t.push_back(f->val);\n                arr.push_back(f->val);\n                if(f->left != NULL)q.push(f->left);\n                if(f->right != NULL)q.push(f->right);\n            }\n            sort(arr.begin(), arr.end());\n            \n            for(int i = 0; i < t.size(); i++){\n                if(t[i] != arr[i]){\n                    ans++;\n                    int ind1 = mp[t[i]];\n                    int ind2 = mp[arr[i]];\n                    mp[arr[i]] = ind1;\n                    mp[t[i]] = ind2;\n                    swap(t[ind1], t[ind2]);\n                }\n            }\n        }\n        return ans;\n    }\n};"}