{"problemName":"find-consecutive-integers-from-a-data-stream","language":"cpp","code":"class DataStream {\npublic:\n    list<int> vec;\n    int val,k;\n    int s;\n    int u;\n    unordered_map<int,int> umap;\n    DataStream(int value, int kk) {\n        k=kk;\n        s=0;\n        u=0;\n        val=value;\n        // vec.resize;\n    }\n    \n    bool consec(int num) {\n        \n        vec.push_back(num);\n        if(!umap.count(num)) u++;\n        umap[num]++;\n        s++;\n        \n        if(s>k){\n            auto i=begin(vec);\n            umap[*i]--;\n            // for(i=vec.begin();i!=vec.end();i++){\n            //     cout<<*i<<\" \";\n            // }\n            i=begin(vec);\n            if(umap[*i]==0){\n                umap.erase(*i);\n                u--;\n            }\n            s--;\n            vec.pop_front();\n        }\n        auto it = umap.begin();\n        // cout<<s<<\" \"<<u<<\" \"<<it->first<<endl;\n        if(s==k) return u==1&&it->first==val;\n        return 0;\n    }\n};\n\n/**\n * Your DataStream object will be instantiated and called as such:\n * DataStream* obj = new DataStream(value, k);\n * bool param_1 = obj->consec(num);\n */"}