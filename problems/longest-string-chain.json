{"problemName":"longest-string-chain","language":"cpp","code":"int dp[1005][1005];\nclass Solution {\npublic:\n    bool check(string &a, string &b){\n        if(a.size() != b.size() - 1)return false;\n        int i = 0, j = 0;\n        while(i < a.length() && j < b.length()){\n            if(a[i] != b[j]){\n                j++;\n            }else{\n                i++;\n                j++;\n            }\n        }\n        return (i == a.size() && j >=  b.size() - 1);\n    }\n    int helper(vector<string>&arr, int ind, int prev){\n        if(ind == arr.size())return 0;\n        if(dp[ind][prev + 1] != -1)return dp[ind][prev + 1];\n        int take = 0, notTake = 0;\n        notTake = helper(arr, ind + 1, prev);\n        if(prev == -1 || check(arr[prev], arr[ind]))\n            take = 1 + helper(arr, ind + 1, ind);\n        return dp[ind][prev + 1] = max(take, notTake);\n    }\n    int longestStrChain(vector<string>& words) {\n        memset(dp, -1, sizeof dp);\n        sort(words.begin(), words.end(), [&](string &a, string &b){\n            return a.size() < b.size();\n        });\n        return helper(words, 0, -1);\n    }\n};"}