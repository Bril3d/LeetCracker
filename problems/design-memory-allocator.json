{"problemName":"design-memory-allocator","language":"cpp","code":"class Allocator {\npublic:\n    vector<int> vec;\n    unordered_map<int,vector<int>> umap;\n    Allocator(int n) {\n        for(int i=0;i<n;i++){\n            vec.push_back(-1);\n        }\n    }\n    \n    int allocate(int size, int mID) {\n        int ans=-1;\n        int cnt=0;\n        int idx=0;\n        for(int i=0;i<vec.size();i++){\n            if(vec[i]==-1){\n                cnt++;\n            }else{\n                cnt=0;\n                idx=i+1;\n                continue;\n            }\n            if(cnt==size){\n                ans=idx;\n                while(idx<=i){\n                    vec[idx]=mID;\n                    umap[mID].push_back(idx);\n                    idx++;\n                }\n                break;\n            }\n        }\n        return ans;\n    }\n    \n    int free(int mID) {\n        int cnt=0;\n        for(auto i:umap[mID]){\n            vec[i]=-1;\n            cnt++;\n        }\n        umap.erase(mID);\n        return cnt;\n    }\n};\n\n/**\n * Your Allocator object will be instantiated and called as such:\n * Allocator* obj = new Allocator(n);\n * int param_1 = obj->allocate(size,mID);\n * int param_2 = obj->free(mID);\n */"}