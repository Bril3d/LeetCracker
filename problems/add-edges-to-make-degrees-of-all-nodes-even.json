{"problemName":"add-edges-to-make-degrees-of-all-nodes-even","language":"cpp","code":"class Solution {\npublic:\n    bool isPossible(int n, vector<vector<int>>& edges) {\n        vector<unordered_set<int>> graph(n);\n        vector<int> deg(n);\n        for(auto edge:edges) {\n            graph[edge[0] - 1].insert(edge[1] - 1);\n            graph[edge[1] - 1].insert(edge[0] - 1);\n            deg[edge[0]-1]++;\n            deg[edge[1]-1]++;\n        }\n        vector<int> nodes;\n        for(int i = 0; i < n; i += 1) {\n            if(deg[i]&1) nodes.push_back(i);\n        }\n        if(nodes.size() == 0) return true;\n        if(nodes.size() % 2 == 1 || nodes.size() > 4) return false;\n        if(nodes.size() == 2) {\n            if(!graph[nodes[0]].count(nodes[1])) return true;\n            unordered_set<int> st;\n            for(auto it: graph[nodes[0]]) st.insert(it);\n            for(auto it:graph[nodes[1]]) st.insert(it);\n            if(st.size() == n) return false;\n            return true;\n        }\n        bool flag = false;\n        int maxcnt = 0;\n        vector<int> u2;\n        for(int x: nodes) {\n            int cnt = 0;\n            vector<int> e;\n            for(int y:nodes){\n                if(graph[x].count(y)) {\n                    cnt++;\n                    e.push_back(y);\n                    flag = true;\n                }\n            }\n            if(cnt > maxcnt) {\n                u2 = e;\n                maxcnt = cnt;\n            }\n        }\n        if(!flag || maxcnt == 1) return true;\n        if(maxcnt == 3) return false;\n        if(graph[u2[0]].count(u2[1])) return false;\n        return true;\n    }\n};"}