{"problemName":"insert-delete-getrandom-o1-duplicates-allowed","language":"cpp","code":"class RandomizedCollection {\n    private:\n    vector<pair<int,int>> vec;\n    unordered_map<int,vector<int>> umap;\npublic:\n    /** Initialize your data structure here. */\n    RandomizedCollection() {}\n    \n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\n    bool insert(int val) {\n       bool res=(umap[val].size())? false:true;\n        umap[val].push_back(vec.size());\n         vec.push_back(make_pair(umap[val].size()-1,val));\n        return res;\n    }\n    \n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\n    bool remove(int val) {\n        if(!umap[val].size()) return false;\n            \n            auto last = vec.back();\n            umap[last.second][last.first] = umap[val].back();\n            vec[umap[val].back()] = last;\n            umap[val].pop_back();\n            if(umap[val].empty()) umap.erase(val);\n            vec.pop_back();\n\n        \n        return true;\n            \n    }\n    \n    /** Get a random element from the collection. */\n    int getRandom() {\n        return vec[rand()%vec.size()].second;\n    }\n};\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * RandomizedCollection* obj = new RandomizedCollection();\n * bool param_1 = obj->insert(val);\n * bool param_2 = obj->remove(val);\n * int param_3 = obj->getRandom();\n */"}