{"problemName":"flatten-binary-tree-to-linked-list","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode *previous = NULL;\n    void helper(TreeNode *root)\n    {\n        if (root == NULL)\n        {\n            return;\n        }\n        helper(root->right);\n        helper(root->left);\n        root->right = previous;\n        root->left = NULL;\n        previous = root;\n    }\n    void flatten(TreeNode *root)\n    {\n        helper(root);\n    }\n};"}