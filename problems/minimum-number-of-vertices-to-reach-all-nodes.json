{"problemName":"minimum-number-of-vertices-to-reach-all-nodes","language":"cpp","code":"class Solution {\npublic:\n    void dfs(vector<vector<int>> &adj, vector<int> &vis, int curr){\n        vis[curr] = 1;\n        for(auto i : adj[curr]){\n            if(!vis[i]){\n                dfs(adj, vis, i);\n            }\n        }\n    }\n    vector<int> findSmallestSetOfVertices(int n, vector<vector<int>>& edges) {\n        vector<vector<int>> adj(n);\n        for(auto i : edges)\n        {\n            adj[i[0]].push_back(i[1]);\n        }\n        vector<int> indeg(n, 0);\n        for(auto i : adj){\n            for(auto j : i){\n                indeg[j]++;\n            }\n        }\n        priority_queue<pair<int, int>> pq;\n        vector<int> vis(n, 0);\n        for(int i = 0; i <n; i ++){\n            pq.push({-indeg[i], i});\n        }\n        vector<int> ans;\n        while(!pq.empty()){\n            auto t= pq.top();\n            pq.pop();\n            if(vis[t.second])continue;\n            ans.push_back(t.second);\n            dfs(adj, vis, t.second);\n        }\n        return ans;\n    }\n};"}