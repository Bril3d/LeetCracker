{"problemName":"increasing-triplet-subsequence","language":"cpp","code":"class Solution {\npublic:\n    int CeilIndex(std::vector<int>& v, int l, int r, int key)\n    {\n        while (r - l > 1) {\n            int m = l + (r - l) / 2;\n            if (v[m] >= key)\n                r = m;\n            else\n                l = m;\n        }\n\n        return r;\n    }\n\n    int LongestIncreasingSubsequenceLength(std::vector<int>& v)\n    {\n        if (v.size() == 0)\n            return 0;\n\n        std::vector<int> tail(v.size(), 0);\n        int length = 1; // always points empty slot in tail\n\n        tail[0] = v[0];\n        for (size_t i = 1; i < v.size(); i++) {\n            if (v[i] < tail[0])\n                tail[0] = v[i];\n            else if (v[i] > tail[length - 1])\n                tail[length++] = v[i];\n            else\n                tail[CeilIndex(tail, -1, length - 1, v[i])] = v[i];\n        }\n\n        return length;\n    }\n    bool increasingTriplet(vector<int>& nums) {\n        return LongestIncreasingSubsequenceLength(nums) >= 3;\n    }\n};"}