{"problemName":"most-frequent-subtree-sum","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map<int,int> umap;\n    int helper(TreeNode * root){\n        if(root == NULL) return 0;\n        int ans = root->val + helper(root->left) + helper(root->right);\n        umap[ans]++;\n        return ans;\n    }\n    vector<int> findFrequentTreeSum(TreeNode* root) {\n        helper(root);\n        int _max = 0;\n        for(auto i : umap){\n            _max = max(_max, i.second);\n        }\n        vector<int> arr;\n        for(auto i : umap){\n            if(i.second == _max){\n                arr.push_back(i.first);\n            }\n        }\n        return arr;\n    }\n};"}