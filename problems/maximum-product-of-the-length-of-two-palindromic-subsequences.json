{"problemName":"maximum-product-of-the-length-of-two-palindromic-subsequences","language":"cpp","code":"class Solution {\npublic:\n    int Lcs(string s1,string s2){\n        int n=s1.length();\n        int m=s2.length();\n        int dp[n+1][m+1];\n        memset(dp,0,sizeof(dp));\n        for(int i=1;i<=n;i++){\n            for(int j=1;j<=m;j++){\n                if(s1[i-1]==s2[j-1])\n                    dp[i][j]=dp[i-1][j-1]+1;\n                else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);\n            }\n        }\n        return dp[n][m];\n    }\n    int helper(string s){\n        string resS=s;\n        reverse(s.begin(),s.end());\n        return Lcs(s,resS);\n    }\n    int maxProduct(string s) {\n        int size=pow(2,s.length());\n        int ans=0;\n       for(int i=1;i<size;i++){\n            int j=i;\n           int idx=0;\n            string X,Y;\n            while(idx<s.length()){\n               if(j&1)\n                X.push_back(s[idx]);\n               else Y.push_back(s[idx]);\n                j>>=1;\n                idx++;\n            }\n           ans=max(helper(X)*helper(Y),ans);\n        }\n        return ans;\n    }\n};"}