{"problemName":"maximum-number-of-points-from-grid-queries","language":"cpp","code":"class Solution {\npublic:\n\n    vector<vector<int>> direc={{-1,0},{1,0},{0,-1},{0,1}};\n    void helper(int i,int j,vector<vector<int>>& grid,vector<vector<int>>& vec,vector<vector<int>>& vis,int mx){\n        priority_queue<pair<int,pair<int,int>>> que;\n        que.push({-1*grid[0][0],{i,j}});\n        vis[0][0]=1;\n        while(que.size()){\n            int s=que.size();\n            // cout<<endl;\n            while(s--){\n                auto tp=que.top();\n                que.pop();\n                int i=tp.second.first;\n                    int j=tp.second.second;\n                    // cout<<i<<\" \"<<j<<\"--\"<<endl;\n                for(auto iter:direc){\n                    \n                    int ii=i+iter[0];\n                    int jj=j+iter[1];\n                    // cout<<ii<<\" \"<<jj<<endl;\n                    if(ii>=0&&jj>=0&&ii<vec.size()&&jj<vec[0].size()&&vis[ii][jj]!=1){\n                        vec[ii][jj]=max(grid[ii][jj],vec[i][j]);\n                        vis[ii][jj]=1;\n                        que.push({-1*grid[ii][jj],{ii,jj}});\n                    }\n                }\n            }\n        }\n    }\n    vector<int> maxPoints(vector<vector<int>>& grid, vector<int>& queries) {\n        vector<vector<int>> vec(grid.size(),vector<int>(grid[0].size(),0)),vis(grid.size(),vector<int>(grid[0].size(),0));\n        for(int i=0;i<grid.size();i++){\n            for(int j=0;j<grid[0].size();j++){\n                vec[i][j]=INT_MAX;\n                vis[i][j]=0;\n            }\n        }\n        vec[0][0]=grid[0][0];\n\n        helper(0,0,grid,vec,vis,0);\n        vector<int> ans;\n        vector<int> temp;\n        for(int i=0;i<grid.size();i++){\n            for(int j=0;j<grid[0].size();j++){\n                temp.push_back(vec[i][j]);\n                // cout<<vec[i][j]<<\" \";\n            }\n            // cout<<endl;\n        }\n        \n        sort(begin(temp),end(temp));\n\n        \n        for(auto i:queries){\n            if(grid[0][0]<i)\n                ans.push_back( (upper_bound(temp.begin(), temp.end(), i-1)-temp.begin()));\n            else ans.push_back(0);\n        }\n        return ans;\n    }\n};"}