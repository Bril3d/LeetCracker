{"problemName":"sum-of-distances","language":"cpp","code":"class Solution {\npublic:\n\nvector<long long> distance(vector<int> &nums)\n{\n    map<long long, vector<long long>> mp;\n    map<long long, vector<long long>> pre;\n    int n = nums.size();\n    vector<long long> ans(n);\n    for (int i = 0; i < nums.size(); i++)\n    {\n        mp[nums[i]].push_back(i);\n        pre[nums[i]].push_back(i);\n    }\n    for (auto &it : pre)\n    {\n        for (int i = 1; i < it.second.size(); i++)\n        {\n            it.second[i] += it.second[i - 1];\n        }\n    }\n    for (int i = 0; i < n; i++)\n    {  \n        int ind1 = lower_bound(mp[nums[i]].begin(), mp[nums[i]].end(), i) - mp[nums[i]].begin();\n        long long left = 0;\n        long long num = mp[nums[i]][ind1];\n        if (ind1 > 0)\n        {\n            left = ind1 * (num)-pre[nums[i]][ind1 - 1];\n        }\n        long long right = 0;\n        if (ind1 < n - 1)\n        {\n            right = pre[nums[i]].back() - pre[nums[i]][ind1] - (pre[nums[i]].size() - ind1 - 1) * num;\n        }\n        ans[i] = left + right;\n    }\n    return ans;\n}\n};"}