{"problemName":"binary-search-tree-iterator","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\npublic:\n    vector<TreeNode *> arr;\n    int ptr = 0;\n    void inorder(TreeNode *root){\n        if(!root)return;\n        inorder(root->left);\n        arr.push_back(root);\n        inorder(root->right);\n    }\n    BSTIterator(TreeNode* root) {\n        inorder(root);\n        for(auto i : arr){\n            cout<<i->val<<' ';\n        }\n        cout<<endl;\n    }\n    \n    int next() {\n        return arr[ptr++]->val;        \n    }\n    \n    bool hasNext() {\n        return ptr <= arr.size() - 1;\n    }\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */"}