{"problemName":"contain-virus","language":"cpp","code":"class Solution {\npublic:\n    int containVirus(vector<vector<int>>& grid) {\n        int ans = 0;\n        while (true) {\n            int walls = process(grid);\n            if (walls == 0) break; // No more walls to build\n            ans += walls;\n        }\n        return ans;\n    }\nprivate:\n    int process(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        // cnt is max area to be affected by a single virus region; ans is corresponding walls\n        int cnt = 0, ans = 0, color = -1, row = -1, col = -1;\n        // visited virus as 1, visited 0 using different color to indicate being affected by different virus\n        vector<vector<int>> visited(m, vector<int>(n, 0)); \n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1 && visited[i][j] == 0) {\n                    int walls = 0, area = dfs(grid, visited, i, j, color, walls);\n                    if (area > cnt) {\n                        ans = walls;\n                        cnt = area;\n                        row = i; \n                        col = j;\n                    }\n                    color--;\n                }\n            }\n        }\n        // set this virus region inactive\n        buildWall(grid, row, col);\n        // propagate other virus by 1 step\n        visited = vector<vector<int>>(m, vector<int>(n, 0));\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1 && visited[i][j] == 0) \n                    spread(grid, visited, i, j);\n            }\n        }\n        return ans;\n    }\n    int dfs(vector<vector<int>>& grid, vector<vector<int>>& visited, int row, int col, int color, int& walls) {\n        int m = grid.size(), n = grid[0].size(), ans = 0;\n        if (row < 0 || row >= m || col < 0 || col >= n) return 0;\n        if (grid[row][col] == 0) {\n            walls++; \n            if (visited[row][col] == color) return 0;\n            visited[row][col] = color;\n            return 1;\n        }\n        // grid[row][col] could be -1, inactive virus\n        if (visited[row][col] == 1 || grid[row][col] != 1) return 0; \n        visited[row][col] = 1;\n        vector<int> dir = {-1, 0, 1, 0, -1};\n        for (int i = 0; i < 4; i++) \n            ans += dfs(grid, visited, row+dir[i], col+dir[i+1], color, walls);\n        return ans;\n    }\n    void buildWall(vector<vector<int>>& grid, int row, int col) {\n        int m = grid.size(), n = grid[0].size();\n        if (row < 0 || row >= m || col < 0 || col >= n || grid[row][col] != 1) return;\n        grid[row][col] = -1; //set inactive\n        vector<int> dir = {-1, 0, 1, 0, -1};\n        for (int i = 0; i < 4; i++) \n            buildWall(grid, row+dir[i], col+dir[i+1]);\n    }\n    void spread(vector<vector<int>>& grid, vector<vector<int>>& visited, int row, int col) {\n        int m = grid.size(), n = grid[0].size();\n        if (row < 0 || row >= m || col < 0 || col >= n || visited[row][col] == 1) return;\n        if (grid[row][col] == 0) {\n            grid[row][col] = 1;\n            visited[row][col] = 1;\n        }\n        else if (grid[row][col] == 1) {\n           visited[row][col] = 1;\n           vector<int> dir = {-1, 0, 1, 0, -1};\n           for (int i = 0; i < 4; i++) \n               spread(grid, visited, row+dir[i], col+dir[i+1]);\n        }\n    }\n};"}