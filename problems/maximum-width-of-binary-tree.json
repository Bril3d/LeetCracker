{"problemName":"maximum-width-of-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode *root)\n{\n    if (root == NULL)\n        return 0;\n    queue<pair<TreeNode *, long long int>> q;\n    q.push({root, 0});\n    q.push({NULL, 0});\n    int curr = 0;\n    vector<vector<pair<TreeNode *, long long int>>> ans;\n    vector<pair<TreeNode *, long long int>> ds;\n    while (!q.empty())\n    {\n        auto front = q.front();\n        q.pop();\n        if (front.first == NULL)\n        {\n            for (int i = ds.size() - 1; i >= 0; i--)\n                ds[i].second -= ds[0].second;\n            ans.push_back(ds);\n            ds.clear();\n            curr = q.front().second;\n            if (!q.empty())\n                q.push({NULL, -1});\n        }\n        else\n        {\n            ds.push_back(front);\n            if (front.first->left != NULL)\n                q.push({front.first->left, 2 * (front.second - curr) + 1});\n            if (front.first->right != NULL)\n                q.push({front.first->right, 2 * (front.second - curr) + 2});\n        }\n    }\n    long long int _max = INT_MIN;\n    for (auto i : ans)\n    {\n        for (auto j : i)\n        {\n            cout << \"{\" << j.first->val << \", \" << j.second << \"} \";\n        }\n        cout << endl;\n        _max = max(_max, i[i.size() - 1].second - i[0].second + 1);\n    }\n    return (int)_max;\n}\n};"}