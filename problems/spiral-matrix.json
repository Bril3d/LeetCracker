{"problemName":"spiral-matrix","language":"cpp","code":"int visited[15][15];\nclass Solution {\npublic:\n    void helper(vector<vector<int>> &matrix, vector<int> &ans, int x, int y, int &D)\n    {\n        if(x < 0 || x >= matrix.size() || y < 0 || y >= matrix[0].size()) return;\n        if (visited[x][y] == 1)\n            return;\n        ans.push_back(matrix[x][y]);\n        visited[x][y] = 1;\n        if (D == 0)\n        {\n            if (x == 0 || visited[x - 1][y] == 1)\n            {\n                y++;\n                D = ++D % 4;\n                helper(matrix, ans, x, y, D);\n            }\n            else\n            {\n                helper(matrix, ans, x - 1, y, D);\n            }\n        }\n        else if (D == 1)\n        {\n            if (y == matrix[0].size() - 1 || visited[x][y + 1] == 1)\n            {\n                x++;\n                D = ++D % 4;\n                helper(matrix, ans, x, y, D);\n            }\n            else\n            {\n                helper(matrix, ans, x, y + 1, D);\n            }\n        }\n        else if (D == 2)\n        {\n            if (x == matrix.size() - 1 || visited[x + 1][y] == 1)\n            {\n                y--;\n                D = ++D % 4;\n                helper(matrix, ans, x, y, D);\n            }\n            else\n            {\n                helper(matrix, ans, x + 1, y, D);\n            }\n        }\n        else if (D == 3)\n        {\n            if (y == 0 || visited[x][y - 1] == 1)\n            {\n                x--;\n                D = ++D % 4;\n                helper(matrix, ans, x, y, D);\n            }\n            else\n            {\n                helper(matrix, ans, x, y - 1, D);\n            }\n        }\n        return;\n    }\n    vector<int> spiralOrder(vector<vector<int>> &matrix)\n    {\n        memset(visited, 0, sizeof(visited));\n        vector<int> ans;\n        int D = 1;\n        helper(matrix, ans, 0, 0, D);\n        return ans;\n    }\n};"}