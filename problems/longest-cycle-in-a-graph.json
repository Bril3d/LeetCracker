{"problemName":"longest-cycle-in-a-graph","language":"cpp","code":"class Solution {\npublic:\n    int dfs(vector<vector<int>> &adj, vector<int> &vis,unordered_map<int, int> &currVis, int curr, int ind){\n        vis[curr] = 1;\n        currVis[curr] = ind;\n        int ans = -1;\n        for(auto i : adj[curr]){\n            if(i == -1)continue;\n            if(i == curr || currVis.find(i) != currVis.end()){\n                return ind - currVis[i] + 1;\n            }\n            if(vis[i])continue;\n            ans = max(ans, dfs(adj, vis, currVis, i, ind + 1));\n        }\n        currVis.erase(curr);\n        return ans;\n    }\n    int longestCycle(vector<int>& edges) {\n        vector<vector<int>> adj(edges.size());\n        for(int i = 0; i < edges.size();i++){\n            adj[i].push_back(edges[i]);\n        }\n        vector<int> vis(edges.size() + 1, 0);\n        unordered_map<int, int> currVis;\n        int ans = -1;\n        for(int i = 0; i < edges.size();i++){\n            if(!vis[i]){\n                ans = max(ans, dfs(adj, vis, currVis, i, 0));\n            }\n        }\n        return ans;\n    }\n};"}