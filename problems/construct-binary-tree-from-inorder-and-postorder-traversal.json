{"problemName":"construct-binary-tree-from-inorder-and-postorder-traversal","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode *helper(vector<int>& inorder, int ins, int ine, vector<int>& postorder, int pos, int poe, unordered_map<int,int> &indices){\n        if(ins > ine || pos > poe){\n            return NULL;\n        }\n        TreeNode *root = new TreeNode(postorder[poe]);\n        int index = indices[postorder[poe]];\n        int left = index - ins;\n        root->left = helper(inorder, ins, index - 1, postorder, pos, pos + left - 1, indices);\n        root->right = helper(inorder, index + 1, ine, postorder, pos + left, poe - 1, indices);\n        return root;\n    }\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        unordered_map<int,int> indices;\n        for(int i = 0; i < inorder.size(); i++){\n            indices[inorder[i]] = i;\n        }\n        return helper(inorder, 0, inorder.size() - 1, postorder, 0, postorder.size() - 1, indices);\n    }\n};"}