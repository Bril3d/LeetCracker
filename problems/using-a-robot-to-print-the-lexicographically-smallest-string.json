{"problemName":"using-a-robot-to-print-the-lexicographically-smallest-string","language":"cpp","code":"class Solution {\npublic:\n    string robotWithString(string s) {\n        vector<int> umap(26,0);\n        for(auto i:s) umap[i-'a']++;\n        vector<char> vec;\n        string ans;\n        int idx=0;\n        \n        for(int i=0;i<s.length();i++){\n            // cout<<idx<<\" \"<<i<<endl;\n            if(s[i]-'a'==idx){\n                umap[s[i]-'a']--;\n                ans.push_back(s[i]);\n            }else if(vec.size()&&vec.back()-'a'<=idx){\n                while(vec.size()&&vec.back()-'a'<=idx){\n                    ans.push_back(vec.back());\n                    vec.pop_back();\n                }\n            }else{\n                umap[s[i]-'a']--;\n                vec.push_back(s[i]);\n            }\n            while(idx<umap.size()){\n                // cout<<idx<<\" \";\n                while(vec.size()&&vec.back()-'a'<=idx){\n                    ans.push_back(vec.back());\n                    vec.pop_back();\n                }\n                if(umap[idx]!=0) break;\n                idx++;\n            }\n            \n        }\n        while(vec.size()){\n            ans.push_back(vec.back());\n            vec.pop_back();\n        }\n        return ans;\n    }\n};"}