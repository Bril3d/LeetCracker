{"problemName":"serialize-and-deserialize-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        string s = \"\";\n        queue<TreeNode *> q;\n        q.push(root);\n        while(!q.empty()){\n            int n = q.size();\n            for(int i = 0; i < n; i++){\n                TreeNode *front = q.front();\n                q.pop();\n                if(front != NULL){\n                    q.push(front->left);\n                    q.push(front->right);\n                    s.append(to_string(front->val) + ',');\n                }else{\n                    s.append(\"#,\");\n                }\n            }\n        }\n        cout<<s<<endl;\n        return s;        \n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        if(data.empty()) return NULL;\n        \n        vector<TreeNode *> arr;\n        string num = \"\";\n        for(int i = 0;i< data.length(); i++){\n            char c = data[i];\n            if(c == ','){\n                if(data[i-1] == '#'){\n                    continue;\n                }else{\n                    TreeNode *temp = new TreeNode(stoi(num));\n                    arr.push_back(temp);\n                    num = \"\";\n                }\n            }\n            else if(c == '#') {\n                arr.push_back(NULL);\n            }\n            else{\n                num.push_back(c);\n            }\n        }\n        int pos = 1;\n        for(int i = 0;i<arr.size();i++){\n            if(arr[i] == NULL) continue;\n            arr[i]->left = arr[pos];\n            arr[i]->right = arr[pos + 1];\n            pos +=2;\n        }\n        for(auto i : arr){\n            if(i == NULL){\n                cout<<\"NULL\"<<' ';\n            }else{\n                cout<<i->val<<\" \";                \n            }\n        }\n        return arr[0];\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));"}