{"problemName": "binary-tree-inorder-traversal", "language": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : /**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void helper(vector<int> &arr, TreeNode * root){\n        if(root == NULL){\n            return;\n        }\n        helper(arr,root->left);\n        arr.push_back(root->val);\n        helper(arr,root->right);\n    }\n        vector<int> inorderTraversal(TreeNode *root)\n    {\n        vector<int> arr;\n        TreeNode *curr = root;\n        while (curr != NULL)\n        {\n            if (curr->left == NULL)\n            {\n                arr.push_back(curr->val);\n                curr = curr->right;\n            }\n            else\n            {\n                TreeNode *prev = curr->left;\n                while (prev->right != NULL && prev->right != curr)\n                {\n                    prev = prev->right;\n                }\n                if (prev->right == NULL)\n                {\n                    prev->right = curr;\n                    curr = curr->left;\n                }\n                else\n                {\n                    arr.push_back(curr->val);\n                    curr = curr->right;\n                    prev->right = NULL;\n                }\n            }\n        }\n        return arr;\n    }\n};"}