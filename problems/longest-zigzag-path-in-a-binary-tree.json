{"problemName":"longest-zigzag-path-in-a-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int ans = 0;\n    map<TreeNode*, map<bool, int>> dp;\n    int helper(TreeNode *root, bool goLeft){\n        if(root == NULL)return 0;\n        if(dp[root].find(goLeft) != dp[root].end())return dp[root][goLeft];\n        int ans1 = 1, ans2 = 1;\n        if(goLeft && root->left != NULL){\n            ans1 += helper(root->left, false);\n        }else if(!goLeft && root->right != NULL){\n            ans2 += helper(root->right, true);\n        }\n        return dp[root][goLeft] = max(ans1, ans2);\n    }\n    void preorder(TreeNode *root){\n        if(root == NULL)return;\n        int temp = max(helper(root, true), helper(root, false)) - 1;\n        ans = max(ans, temp);\n        preorder(root->left);\n        preorder(root->right);\n    }\n    int longestZigZag(TreeNode* root) {\n        dp.clear();\n        preorder(root);\n        return ans;\n    }\n};"}