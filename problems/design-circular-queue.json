{"problemName":"design-circular-queue","language":"cpp","code":"class MyCircularQueue {\npublic:\n    queue<int> q;\n    int size;\n    MyCircularQueue(int k) {\n        size = k;\n    }\n    \n    bool enQueue(int value) {\n        if(q.size() < size) {\n            q.push(value);\n            return true;\n        }\n        return false;\n    }\n    \n    bool deQueue() {\n        if(q.empty()) {\n            return false;\n        }\n        q.pop();\n        return true;\n    }\n    \n    int Front() {\n        if(q.empty()) return -1;\n        \n        return q.front();\n    }\n    \n    int Rear() {\n        if(q.empty()) return -1;\n        return q.back();\n        \n    }\n    \n    bool isEmpty() {\n        return q.size() == 0;\n    }\n    \n    bool isFull() {\n       return q.size() == size;\n    }\n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */"}