{"problemName":"ones-and-zeroes","language":"cpp","code":"class Solution {\npublic:\n    vector<int> one;\n    vector<int> zero;\n    int dp[601][101][101];\n    int find(int i, int m, int n) {\n        if(i == one.size()) {\n            return 0;\n        }\n        if(dp[i][m][n] != -1) {\n            return dp[i][m][n];\n        }\n        int op1, op2;\n        op1 = 0;\n        op2 = 0;\n        if(m - zero[i] >= 0 and n - one[i] >= 0) {\n            op1 = 1 + find(i + 1, m - zero[i], n - one[i]);\n        }\n        op2 = find(i + 1, m, n);\n        return dp[i][m][n] = max(op1, op2);\n        \n    }\n    int findMaxForm(vector<string>& strs, int m, int n) {\n        \n        for(auto i : strs) {\n            int o = 0;\n            int z = 0;\n            for(auto j : i) {\n                if(j == '1') o++;\n                else z++;\n            }\n            one.push_back(o);\n            zero.push_back(z);\n        }\n        memset(dp, -1, sizeof dp);\n        return find(0, m, n);\n        \n    }\n};"}