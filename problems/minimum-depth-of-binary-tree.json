{"problemName":"minimum-depth-of-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int helper(TreeNode* root){\n        if(root== NULL)return INT_MAX;\n        if(root->left == NULL && root->right == NULL){\n            return 1;\n        }\n        return min(helper(root->left),helper(root->right)) + 1;\n    }\n    int minDepth(TreeNode* root) {\n        if(root == NULL)return 0;\n        else return helper(root);\n    }\n};"}