{"problemName":"number-of-ways-to-arrive-at-destination","language":"cpp","code":"class Solution {\npublic:\n    int countPaths(int n, vector<vector<int>>& roads) {\n        int M=1e9+7;\n        if(n==2)\n            return 1;\n        if(n==1)\n            return 1;\n        unordered_map<long long,list<pair<long long,long long>>> adj;\n        for(int i=0;i<roads.size();i++)\n        {\n            long long u=roads[i][0];\n            long long v=roads[i][1];\n            long long w=roads[i][2];\n            \n            adj[u].push_back({v,w});\n            adj[v].push_back({u,w});\n        }\n        \n        set<pair<long long,long long>> st;\n        vector<long long> distance(n,LONG_MAX);\n        vector<long long> path(n,0);\n        distance[0]=0;\n        path[0]=1;\n        \n        st.insert({0,0});\n        \n        while(!st.empty())\n        {\n            auto top=*(st.begin());\n            st.erase(st.begin());\n            long u=top.second;\n            \n            for(auto it:adj[u])\n            {\n                long long v=it.first;\n                long long wt=it.second;\n                \n                if(distance[v]>(distance[u])+wt)\n                {\n                    auto findNode=st.find({distance[v],v});\n                    if(findNode!=st.end())\n                        st.erase(findNode);\n                    \n                    distance[v]=(distance[u]+wt);\n                    path[v]=path[u];\n                    st.insert({distance[v],v});\n                }\n                else if(distance[v]==distance[u]+wt)\n                {\n                    path[v]=(path[v]+path[u])%M;\n                }\n            }\n        }\n        return path[n-1]%M;\n    }\n};"}