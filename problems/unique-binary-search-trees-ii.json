{"problemName":"unique-binary-search-trees-ii","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n   \n    TreeNode *insertBST(TreeNode *root, int val)\n    {\n        if (root == NULL)\n            return new TreeNode(val);\n        if (val == root->val)\n            return root;\n        else if (val < root->val)\n            root->left = insertBST(root->left, val);\n        else\n            root->right = insertBST(root->right, val);\n        return root;\n    }\n    string serializeBST(TreeNode *root){\n        queue<TreeNode*> q;\n        string s = \"\";\n        q.push(root);\n        while(!q.empty()){\n            int n  = q.size();\n            for(int i = 0 ;i<q.size();i++){\n                TreeNode *front = q.front();\n                q.pop();\n                if(front == NULL){\n                    s.append(\"NULL\");\n                    continue;\n                }else{\n                    s.append(to_string(root->val));\n                }\n                q.push(front->left);\n                q.push(front->right);\n            }\n        }\n        return s;\n    }\n    vector<TreeNode*> generateTrees(int n) {\n        if(n == 0){\n            return {};\n        }\n        vector<int> arr;\n        unordered_map<string, TreeNode*> map;\n        vector<TreeNode *> ans;\n        for(int i = 1;i<=n;i++){\n            arr.push_back(i);\n        }\n        \n        do{\n            TreeNode *root = NULL;\n            for(int i = 0;i<n;i++){\n                root = insertBST(root, arr[i]);\n            }\n            map[serializeBST(root)] = root;\n            for(auto i : arr){\n                cout<<i<<' ';\n            }            \n            cout<<endl;\n        }while(next_permutation(arr.begin(), arr.end()));\n        for(auto i : map){\n            ans.push_back(i.second);\n        }\n        return ans;        \n    }\n};"}