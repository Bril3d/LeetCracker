{"problemName":"maximum-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* helper(vector<int> &nums, int start, int end){\n        if(start > end)return NULL;\n        int ind = max_element(nums.begin() + start, nums.begin() + end + 1) - nums.begin();\n        cout<<nums[ind]<<',';\n        TreeNode *root = new TreeNode(nums[ind]);\n        root->left = helper(nums, start, ind - 1);\n        root->right = helper(nums, ind + 1, end);\n        return root;\n    }\n    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {\n        return helper(nums, 0, nums.size() - 1);\n    }\n};"}