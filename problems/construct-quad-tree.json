{"problemName":"construct-quad-tree","language":"cpp","code":"/*\n// Definition for a QuadTree node.\nclass Node {\npublic:\n    bool val;\n    bool isLeaf;\n    Node* topLeft;\n    Node* topRight;\n    Node* bottomLeft;\n    Node* bottomRight;\n    \n    Node() {\n        val = false;\n        isLeaf = false;\n        topLeft = NULL;\n        topRight = NULL;\n        bottomLeft = NULL;\n        bottomRight = NULL;\n    }\n    \n    Node(bool _val, bool _isLeaf) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = NULL;\n        topRight = NULL;\n        bottomLeft = NULL;\n        bottomRight = NULL;\n    }\n    \n    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = _topLeft;\n        topRight = _topRight;\n        bottomLeft = _bottomLeft;\n        bottomRight = _bottomRight;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* constructQuadTree(vector<vector<int>>& grid, int rowStart, int rowEnd, int colStart, int colEnd) {\n        if (rowStart > rowEnd || colStart > colEnd) {\n            return nullptr;\n        }\n        \n        // Check if all elements in the quadrant are the same\n        bool isLeaf = true;\n        int val = grid[rowStart][colStart];\n        for (int i = rowStart; i <= rowEnd; i++) {\n            for (int j = colStart; j <= colEnd; j++) {\n                if (grid[i][j] != val) {\n                    isLeaf = false;\n                    break;\n                }\n            }\n            if (!isLeaf) {\n                break;\n            }\n        }\n        \n        // If all elements in the quadrant are the same, create a new leaf node\n        if (isLeaf) {\n            return new Node(val, true);\n        }\n        \n        // Otherwise, divide the quadrant into four sub-quadrants and recursively construct the quad-tree for each sub-quadrant\n        int rowMid = (rowStart + rowEnd) / 2;\n        int colMid = (colStart + colEnd) / 2;\n        Node* topLeft = constructQuadTree(grid, rowStart, rowMid, colStart, colMid);\n        Node* topRight = constructQuadTree(grid, rowStart, rowMid, colMid+1, colEnd);\n        Node* bottomLeft = constructQuadTree(grid, rowMid+1, rowEnd, colStart, colMid);\n        Node* bottomRight = constructQuadTree(grid, rowMid+1, rowEnd, colMid+1, colEnd);\n        return new Node(false, false, topLeft, topRight, bottomLeft, bottomRight);\n    }\n    Node* construct(vector<vector<int>>& grid) {\n        int n = grid.size();\n        return constructQuadTree(grid, 0, n-1, 0, n-1);\n    }\n};"}