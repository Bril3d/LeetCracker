{"problemName":"word-ladder-ii","language":"cpp","code":"class Solution {\npublic:\n\n    void dfs(vector<vector<string>> &ans, vector<string> &temp, unordered_map<string, int> &levels, set<string> &st, string curr, int level){\n        if(level == 1){\n            temp.push_back(curr);\n            ans.push_back(temp);\n            temp.pop_back();\n            return;\n        }\n        temp.push_back(curr);\n        // cout<<curr<<\" \"<<level<<endl;\n        for(int i = 0; i < curr.length();i++){\n            char c = curr[i];\n            for(int j = 'a'; j<='z';j++){\n                curr[i] = j;\n                if(st.find(curr) != st.end() && levels[curr] == level - 1){\n                    dfs(ans, temp, levels, st, curr, level - 1);\n                }\n            }\n            curr[i] = c;\n        }\n        temp.pop_back();\n    }\n    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string> wordList)\n    {\n        set<string> st(wordList.begin(), wordList.end());\n        queue<string> q;\n        q.push(beginWord);\n        st.erase(beginWord);\n        int level = 0;\n        unordered_map<string, int> levels;\n        bool found = false;\n        while(!q.empty()){\n            level++;\n            int n = q.size();\n            for(int i = 0; i < n;i++){\n                auto f = q.front();\n                q.pop();\n                levels[f] = level;\n                if(f == endWord){\n                    found = true;\n                    break;\n                }\n                for(int i = 0; i < f.length();i++){\n                    char c = f[i];\n                    for(int j = 'a'; j <= 'z';j++){\n                        f[i] = j;\n                        if(st.find(f)!=st.end()){\n                            q.push(f);\n                            st.erase(f);\n                        }\n                    }\n                    f[i] = c;\n                }\n            }\n            if(found)break;\n        }\n        if(!found)return {};\n        vector<vector<string>> ans;\n        vector<string> temp;\n        set<string> st2(wordList.begin(), wordList.end());\n        st2.insert(beginWord);\n        dfs(ans, temp, levels, st2, endWord, levels[endWord]);\n        for(auto &i : ans){\n            reverse(i.begin(), i.end());\n        }\n        return ans;\n    }\n};"}