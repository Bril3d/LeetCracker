{"problemName":"binary-tree-zigzag-level-order-traversal","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> zigzagLevelOrder(TreeNode *root)\n    {\n        if (root == NULL)\n            return {};\n        vector<vector<int>> ans;\n        vector<int> ds;\n        stack<TreeNode *> q;\n        stack<TreeNode *> st;\n        q.push(NULL);\n        q.push(root);\n        st.push(NULL);\n\n        int f = 0;\n        while (q.size() != 1 || st.size() != 1)\n        {\n            if (f == 0)\n            {\n                TreeNode *front = q.top();\n                if (front == NULL)\n                {\n                    f = 1;\n                    ans.push_back(ds);\n                    ds.clear();\n                }\n                else\n                {\n                    q.pop();\n                    ds.push_back(front->val);\n                    if (front->left != NULL)\n                        st.push(front->left);\n                    if (front->right != NULL)\n                        st.push(front->right);\n                }\n            }\n            else\n            {\n                TreeNode *top = st.top();\n                if (top == NULL)\n                {\n                    f = 0;\n                    ans.push_back(ds);\n                    ds.clear();\n                }\n                else\n                {\n                    st.pop();\n                    ds.push_back(top->val);\n                    if (top->right != NULL)\n                        q.push(top->right);\n                    if (top->left != NULL)\n                        q.push(top->left);\n                }\n            }\n        }\n        ans.push_back(ds);\n        return ans;\n    }\n};"}