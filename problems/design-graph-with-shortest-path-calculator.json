{"problemName":"design-graph-with-shortest-path-calculator","language":"cpp","code":"class Graph {\npublic:\n    vector<vector<pair<int, int>>> adj;\n    int N;\n    vector<vector<int>> dist;\n    Graph(int n, vector<vector<int>>& edges) {\n        adj.assign(n, vector<pair<int, int>>(0));\n        dist.assign(n, vector<int>(n, 1e9));\n        N = n;\n        for(auto i : edges){\n            adj[i[0]].push_back({i[1], i[2]});\n        }\n        applyDiktra();\n    }\n    void applyDiktra(){\n        for(int start = 0; start < N;start++){\n            dist[start][start] = 0;\n            queue<int> q;\n            q.push(start);\n            while(!q.empty()){\n                auto f = q.front();\n                q.pop();\n                for(auto i : adj[f]){\n                    if(dist[start][i.first] >= dist[start][f] + i.second){\n                        dist[start][i.first] = dist[start][f] + i.second;\n                        q.push(i.first);\n                    }\n                }\n            }       \n        }\n    }\n    \n    void addEdge(vector<int> edge) {\n        adj[edge[0]].push_back({edge[1], edge[2]});\n        applyDiktra();\n    }\n    \n    int shortestPath(int node1, int node2) {\n        return dist[node1][node2]  == 1e9 ? -1: dist[node1][node2];\n    }\n};\n\n/**\n * Your Graph object will be instantiated and called as such:\n * Graph* obj = new Graph(n, edges);\n * obj->addEdge(edge);\n * int param_2 = obj->shortestPath(node1,node2);\n */"}