{"problemName":"convert-bst-to-greater-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void inorder(TreeNode *root, vector<int> &ans){\n        if(root == NULL) return;\n        inorder(root->left, ans);\n        ans.push_back(root->val);\n        inorder(root->right, ans);\n    }\n    \n    void inorder(TreeNode *root, unordered_map<int,int> &umap){\n        if(root == NULL) return;\n        inorder(root->left, umap);\n        root->val = umap[root->val];\n        inorder(root->right, umap);\n    }\n    TreeNode* convertBST(TreeNode* root) {\n        vector<int> ans;\n        inorder(root, ans);\n        int prev = 0;\n        unordered_map<int,int> umap;\n        for(int i = ans.size() - 1 ;i>=0;i--){\n            umap[ans[i]] = ans[i] + prev;\n            prev += ans[i];\n        }\n        inorder(root, umap);\n        return root;        \n    }\n};"}