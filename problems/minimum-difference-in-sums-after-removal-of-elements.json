{"problemName":"minimum-difference-in-sums-after-removal-of-elements","language":"cpp","code":"class Solution {\npublic:\n\n   long long minimumDifference(vector<int>& A) {\n        priority_queue<int> L; // storing the smallest N digits in the first part\n        priority_queue<int,vector<int>, greater<>> R; // storing the greatest N digits in the right part\n        long N = A.size() / 3, left = 0, right = 0, ans = LLONG_MAX;\n        vector<long> tmp(A.size());\n        for (int i = A.size() - 1; i >= N; --i) { // calculate the greatest N digits in the right part\n            R.push(A[i]);\n            right += A[i];\n            if (R.size() > N) {\n                right -= R.top();\n                R.pop();\n            }\n            if (R.size() == N) tmp[i] = right; // `tmp[i]` is the maximum sum of `N` digits in `A[i:]`\n        }\n        for (int i = 0; i < A.size() - N; ++i) {\n            L.push(A[i]);\n            left += A[i];\n            if (L.size() > N) {\n                left -= L.top();\n                L.pop();\n            }\n            if (L.size() == N) ans = min(ans, left - tmp[i + 1]);\n        }\n        return ans;\n    }\n};"}