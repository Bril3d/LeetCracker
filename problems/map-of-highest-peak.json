{"problemName":"map-of-highest-peak","language":"cpp","code":"class Solution {\npublic:\n    \n    bool isvalid(vector<vector<int> > &isWater, int row, int col){\n        if(row < 0 || col < 0 || row == isWater.size() || col == isWater[row].size() || isWater[row][col] != -1){\n            return  false;\n        }\n        return true;\n    }\n    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {\n        queue<pair<int, int> > q;\n        \n        for(int i=0;i<isWater.size();i++){\n            for(int j=0;j<isWater[i].size();j++){\n                if(isWater[i][j] == 1){\n                    isWater[i][j] = 0;\n                    q.push({i, j});\n                }\n                else{\n                    isWater[i][j] = -1;\n                }\n            }\n        }\n    \n                while(!q.empty()){\n                    \n                    int row = q.front().first;\n                    int col = q.front().second;\n                    \n                    q.pop();\n               if(isvalid(isWater, row+1, col)){\n                   isWater[row+1][col] = isWater[row][col] + 1;\n                   q.push({row+1, col});\n                   \n               }\n                if(isvalid(isWater, row-1, col)){\n                     isWater[row-1][col] = isWater[row][col] + 1;\n                    q.push({row-1, col});\n                }\n                if(isvalid(isWater, row, col+1)){\n                     isWater[row][col+1] = isWater[row][col] + 1;\n                    q.push({row, col+1});\n                }\n                if(isvalid(isWater, row, col-1)){\n                     isWater[row][col - 1] = isWater[row][col] + 1;\n                    q.push({row, col-1});\n                }\n            }\n        \n         \n        return isWater;\n\n            \n        \n    }\n};"}