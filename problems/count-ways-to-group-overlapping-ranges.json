{"problemName":"count-ways-to-group-overlapping-ranges","language":"cpp","code":"const int MOD = 1e9 + 7;\ntypedef long long int ll;\nll power(ll a, ll b, ll m)\n{\n    ll res = 1;\n    while (b > 0)\n    {\n        if (b % 2 == 1)\n            res = ((res % m) * (a % m)) % m;\n        b = b >> 1;\n        a = ((a % m) * (a % m)) % m;\n    }\n    return res % m;\n}\nclass Solution {\npublic:\n    int countWays(vector<vector<int>>& ranges) {\n        sort(ranges.begin(), ranges.end());\n        int cnt1 = 0, cnt2 =0;\n        vector<vector<int>> arr;\n        int f = 0;\n        for(int i = 0; i < ranges.size();i++){\n            if(i == 0 || arr[arr.size() - 1][1] < ranges[i][0]){\n                f =1;\n                arr.push_back(ranges[i]);\n            }else{\n                arr[arr.size() - 1][1] = max(arr[arr.size() - 1][1], ranges[i][1]);\n            }\n        }\n        return power(2, arr.size(), MOD);\n    }\n};"}