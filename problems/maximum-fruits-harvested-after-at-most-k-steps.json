{"problemName":"maximum-fruits-harvested-after-at-most-k-steps","language":"cpp","code":"class Solution {\npublic:\n    int helper(vector<int> &left,vector<int>& right,int val,int k){\n        int i=1;\n        int mx=0;\n        while(1){\n            if(i*2<k){\n               mx=max({mx,val+left[i-1]+right[k-i*2-1]}); \n            }else break;\n            i++;\n        }\n        return mx;\n    }\n    int maxTotalFruits(vector<vector<int>>& fruits, int startPos, int k) {\n        unordered_map<int,int> value;\n        for(auto i:fruits) value[i[0]]=i[1];\n        \n        vector<int> left(k,0),right(k,0);\n        int i=startPos-1,idx=0;\n        \n        while(idx<k){\n            if(i==startPos-1) left[idx++]=value[i--];\n            else{\n                left[idx]+=value[i]+left[idx-1];\n                i--;\n                idx++;\n            }\n        }\n        \n        i=startPos+1,idx=0;\n        \n        while(idx<k){\n            \n            if(i==startPos+1) right[idx++]=value[i++];\n            else{\n                right[idx]+=value[i]+right[idx-1];\n                i++;\n                idx++;\n            }\n        }\n        int mx=(k!=0)?max(left[k-1],right[k-1]):0;\n        mx+=value[startPos];\n        return max({mx,helper(left,right,value[startPos],k),helper(right,left,value[startPos],k)});\n        \n        \n        \n    }\n};"}