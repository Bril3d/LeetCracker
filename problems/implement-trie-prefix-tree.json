{"problemName":"implement-trie-prefix-tree","language":"cpp","code":"class Node{\npublic:\n    vector<Node *> arr;\n    bool flag;\n    Node(){\n        arr.assign(26, NULL);\n        flag = false;\n    }\n    bool containsKey(char c){\n        return (arr[c - 'a'] != NULL);\n    }\n    void insertKey(char c){\n        arr[c - 'a'] = new Node();\n    }\n    Node *getCharacterNode(char c){\n        return arr[c - 'a'];\n    }\n    void setWordEnd(){\n        flag = true;\n    }\n    bool isWordEnd(){\n        return flag;\n    }\n};\nclass Trie {\npublic:\n    Node *root;\n    Trie() {\n        root = new Node();\n    }\n    \n    void insert(string word) {\n        Node *node = root;\n        for(auto i : word){\n            if(!node->containsKey(i)){\n                node->insertKey(i);\n            }\n            node = node->getCharacterNode(i);            \n        }\n        node->setWordEnd();\n    }\n    \n    bool search(string word) {\n        Node *node = root;\n        for(auto i : word){\n            if(!node->containsKey(i)){\n                return false;\n            }\n            node = node->getCharacterNode(i);            \n        }\n        return node->isWordEnd();        \n    }\n    \n    bool startsWith(string prefix) {\n        Node *node = root;\n        for(auto i : prefix){\n            if(!node->containsKey(i)){\n                return false;\n            }\n            node = node->getCharacterNode(i);            \n        }\n        return true;\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */"}