{"problemName":"sum-of-distances-in-tree","language":"cpp","code":"class Solution {\npublic:\n    map<int, vector<int> > m;\n    map<int, int> count;\n    map<int, int> stSum;\n    vector<int> ans;\n    int N;\n    \n    \n    void dfs1(int node, int parent) {\n        for(auto child : m[node]) {\n            if(child != parent) {\n                dfs1(child, node);\n                count[node] += count[child];\n                stSum[node] += count[child] + stSum[child];\n            }\n        }\n    }\n    \n    void dfs2(int node, int parent) {\n        for(auto child : m[node]) {\n            if(child != parent) {\n                stSum[child] = stSum[node] - count[child] + N - count[child];\n                dfs2(child, node);\n            }\n        }\n    }\n    \n    \n    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {\n        \n        for(auto i: edges) {\n            m[i[0]].push_back(i[1]);\n            m[i[1]].push_back(i[0]);\n        }\n        \n        for(int i = 0; i < n; i++)  {\n            stSum[i] = 0;\n            count[i] = 1;\n        }\n        N = n;\n        dfs1(0, -1);\n        dfs2(0, -1);\n        // vector<int> ans;\n        for(int i = 0; i < n; i++) {\n            ans.push_back(stSum[i]);\n        }\n        return ans;\n        \n        \n        \n    }\n};"}