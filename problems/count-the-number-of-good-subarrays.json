{"problemName":"count-the-number-of-good-subarrays","language":"cpp","code":"class Solution {\npublic:\n    long long helper(int n){\n        return (long long)n*(long long)(2+n-1)/2;\n    }\n    long long countGood(vector<int>& nums, int k) {\n     unordered_map<int,int> umap,prev;\n       int low=0,high=0;\n        long long ans=0;\n        int cnt=0;\n        \n        \n        while(high<nums.size()){\n            // cout<<low<<\" \"<<high<<\" \"<<\" \"<<cnt<<\" \"<<prev[nums[high]]<<endl;\n            umap[nums[high]]++;\n            cnt-=prev[nums[high]];\n            cnt+=helper(umap[nums[high]]-1);\n            prev[nums[high]]=helper(umap[nums[high]]-1);\n            while(cnt>=k&&low<=high){\n                \n                int diff=nums.size()-high;\n                ans+=diff;\n                cnt-=umap[nums[low]]-1;\n                umap[nums[low]]--;\n                prev[nums[low]]=helper(umap[nums[low]]-1);\n                low++;\n            }\n                high++;\n            \n        }\n        \n        return ans;\n    }\n};"}