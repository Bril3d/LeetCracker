{"problemName":"lowest-common-ancestor-of-a-binary-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if(root == NULL || p == root || root == q){\n            return root;\n        }\n        TreeNode *left = lowestCommonAncestor(root->left, p, q);\n        TreeNode *right = lowestCommonAncestor(root->right, p, q);\n        if(left != NULL && right != NULL){\n            return root;\n        }\n        if(left != NULL){\n            return left;\n        }\n        else {\n            return right;\n        }\n    }\n};"}