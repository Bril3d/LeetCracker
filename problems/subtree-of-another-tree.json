{"problemName":"subtree-of-another-tree","language":"cpp","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool b1 = false;\n    bool isEqual(TreeNode *p, TreeNode *q){\n        if(!p && !q) return true;\n        if(!p || !q) return false;\n        if(p->val != q->val)return false;\n        return isEqual(p->left, q->left) && isEqual(p->right, q->right);\n    }\n    void inorder(TreeNode *root, TreeNode *subRoot){\n        if(root == NULL) return;\n        inorder(root->left, subRoot);\n        //\n        b1 = (b1 | isEqual(root, subRoot));\n        //\n        inorder(root->right, subRoot);\n    }\n    bool isSubtree(TreeNode* root, TreeNode* subRoot) {\n        inorder(root, subRoot);\n        return b1;\n    }\n};"}