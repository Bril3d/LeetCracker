{"problemName":"shortest-path-in-binary-matrix","language":"cpp","code":"class Solution {\npublic:\n    vector<vector<int>> arr = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {-1, -1}, {-1, 1}, {1, 1}, {1, -1}};\n    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {\n        int ans = 1;\n        vector<vector<int>> vis(grid.size(), vector<int>(grid[0].size(), 0));\n        vis[0][0] = 1;\n        queue<pair<int, int>> q;\n        if(grid[0][0] == 0)q.push({0, 0});\n\n        while(!q.empty()){\n            int n = q.size();\n            for(int i = 0; i < n; i++){\n                int x = q.front().first, y = q.front().second;\n                q.pop();\n                cout<<x<<\" \"<<y<<endl;\n                for(int i = 0; i < 8; i ++){\n                    int _x =  x + arr[i][0], _y = y + arr[i][1];\n                    if(x == grid.size() - 1 && y == grid[0].size() - 1)return ans;\n                    if(_x >=0 && _x < grid.size() && _y >=0 && _y < grid[0].size() && !vis[_x][_y] && grid[_x][_y] == 0){\n                        vis[_x][_y] = 1;\n                        q.push({_x, _y});\n                    }\n                }\n            }\n            ans++;\n        }\n        return -1;\n    }\n};"}