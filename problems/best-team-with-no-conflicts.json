{"problemName":"best-team-with-no-conflicts","language":"cpp","code":"class Solution {\npublic:\n    vector<pair<int, int> > v;\n    int dp[1005][1005];\n    int find(int i, int prev_age) {\n\n        if(i == v.size()) {\n            return 0;\n        }\n        if(dp[i][prev_age] != -1) {\n            return dp[i][prev_age];\n        }\n        int op1, op2;\n        op1 = op2 = 0;\n        if(v[i].second >= prev_age) {\n            op1 += v[i].first + find(i + 1, v[i].second);\n        }\n        op2 = find(i + 1, prev_age);\n\n        return dp[i][prev_age] = max(op1, op2);\n    }\n    int bestTeamScore(vector<int>& scores, vector<int>& ages) {\n        for(int i = 0 ; i < scores.size(); i++) {\n            v.push_back({scores[i], ages[i]});\n        }\n\n\n        memset(dp, -1, sizeof dp);\n        sort(v.begin(), v.end());\n        return find(0, 0);\n        \n    }\n};"}