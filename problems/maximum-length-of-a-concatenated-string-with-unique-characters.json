{"problemName":"maximum-length-of-a-concatenated-string-with-unique-characters","language":"cpp","code":"class Solution {\npublic:\n    \n    bool compare(string currString , vector<int>&selected){\n        vector<int>selfCheck(26,0);\n        \n        for(int i = 0;i<currString.size();i++){\n            if(selfCheck[currString[i]-'a']!=1)selfCheck[currString[i]-'a'] = 1;\n            else return false;\n        }\n        \n        for(int i = 0;i<currString.size();i++){\n            if(selected[currString[i]-'a']==1)return false;\n        }\n        \n        return true;\n    }\n    \n    int helper(int ind , vector<string>& arr , vector<int>& selected , int length){\n        if(ind == arr.size())return length;\n        \n        string currString = arr[ind];\n        if(compare( currString , selected) == false){\n            return helper(ind+1 , arr , selected , length);\n        }\n        else{\n            length+=currString.size();\n            for(int i = 0;i<currString.size();i++){\n                selected[currString[i]-'a'] = 1;\n            }\n            int op1 = helper(ind+1 , arr , selected ,length);\n            \n            length-=currString.size();\n            for(int i = 0;i<currString.size();i++){\n                selected[currString[i]-'a'] = 0;\n            }\n            int op2 = helper(ind+1 , arr , selected , length);\n            \n            return max(op1 , op2);\n        }\n    }\n    \n    int maxLength(vector<string>& arr) {\n        vector<int>selected(26,0);\n       return helper(0,arr,selected,0); \n    }\n};"}