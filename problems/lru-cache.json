{"problemName":"lru-cache","language":"cpp","code":"class LRUCache {\npublic:\n    unordered_map<int, int> values;\n    unordered_map<int, int> lru;\n    set<pair<int, int>> st;\n    int ind = 0;\n    int capacity = 0;\n    LRUCache(int capacity) {\n        ind = 0;\n        values.clear();\n        st.clear();\n        this->capacity = capacity;\n    }\n    \n    int get(int key) {\n        if(values.find(key) == values.end()){\n            return -1;\n        }\n        st.erase(st.find({lru[key], key}));\n        st.insert({++ind, key});\n        lru[key] = ind;\n        return values[key];\n    }\n    \n    void put(int key, int value) {\n        if(st.size() == capacity){\n            if(values.find(key) != values.end()){\n                //exists.\n                st.erase(st.find({lru[key], key}));\n                values.erase(key);\n            }else{\n                //not exists.\n                auto it = st.begin();\n                pair<int, int> top = *it;\n                st.erase(st.begin());\n                values.erase(top.second);\n            }\n        }else{\n             if(values.find(key) != values.end()){\n                //exists.\n                st.erase(st.find({lru[key], key}));\n                values.erase(key);\n            }\n        }\n        st.insert({++ind, key});\n        values[key] = value;\n        lru[key] = ind;\n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */"}