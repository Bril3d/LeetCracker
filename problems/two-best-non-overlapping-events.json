{"problemName":"two-best-non-overlapping-events","language":"cpp","code":"long dp[100005][3];\nclass Solution {\npublic:\n    class Entry\n    {\n    public:\n        long start, end, val;\n        Entry(long s, long e, long v)\n        {\n            start = s;\n            end = e;\n            val = v;\n        }\n    };\n    long helper(vector<Entry *> &arr, int ind, int k)\n    {\n        if(k < 0)return -1e9;\n        if (ind == arr.size())\n            return 0;\n        if(dp[ind][k] != -1)return dp[ind][k];\n        long lo = ind, hi = arr.size() - 1, idx = arr.size();\n        while (lo <= hi)\n        {\n            long mid = (lo + hi) / 2;\n            if (arr[mid]->start > arr[ind]->end)\n            {\n                idx = mid;\n                hi = mid - 1;\n            }\n            else\n            {\n                lo = mid + 1;\n            }\n        }\n        long t = helper(arr, idx, k - 1) + arr[ind]->val;\n        long nt = helper(arr, ind + 1, k);\n        return dp[ind][k] = max(t, nt);\n    }\n    int maxTwoEvents(vector<vector<int>>& events) {\n        vector<Entry*> arr;\n        for(auto i : events){\n            arr.push_back(new Entry(i[0], i[1], i[2]));\n        }\n        memset(dp, -1, sizeof dp);\n        auto cmpr = [&](Entry *a, Entry *b)\n        {\n            if (a->start == b->start)\n            {\n                return a->end < b->end;\n            }\n            else\n            {\n                return a->start < b->start;\n            }\n        };\n        sort(arr.begin(), arr.end(), cmpr);\n        return helper(arr, 0, 2) ;\n    }\n};"}