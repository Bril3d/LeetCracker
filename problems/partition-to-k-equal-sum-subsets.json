{"problemName":"partition-to-k-equal-sum-subsets","language":"cpp","code":"class Solution {\npublic:\n    // ----------------------*backtracking*--------------------\n//     vector<vector<int>> vec;\n//     bool check(vector<int> & temp){\n        \n//         for(int i=1;i<temp.size();i++)\n//         {\n//             if(temp[i]!=temp[i-1])\n//                 return false;\n//         }\n//         return true;\n//     }\n//     bool partition_of_array_into_k_subset(int i,int n, int k, int noS,vector<int>& nums,vector<int>& sumSubSet){\n//         if(i==n)\n//         {\n//             if(noS==k)\n//                  return check(sumSubSet);\n//             return false;\n//         }\n//         bool flag=false;\n//         for(int j=0;j<k;j++){\n//             if(vec[j].size()){\n//                 vec[j].push_back(nums[i]);\n//                 sumSubSet[j]+=nums[i];\n//              flag|=partition_of_array_into_k_subset(i+1,n,k,noS,nums,sumSubSet);\n//                 sumSubSet[j]-=nums[i];\n//                  vec[j].pop_back(); \n//                 if(flag)\n//                     return true;\n                     \n//             }\n//             else{\n//                 vec[j].push_back(nums[i]);\n//                 sumSubSet.push_back(nums[i]);\n//              flag|=partition_of_array_into_k_subset(i+1,n,k,noS+1,nums,sumSubSet);\n//                 sumSubSet.pop_back();\n//                  vec[j].pop_back(); \n//                 if(flag)\n//                     return true;\n                 \n//                 break;\n//             }\n//         }\n//         return flag;\n//     }\n        \n    \n//     bool canPartitionKSubsets(vector<int>& nums, int k) {\n//         for(int i=0;i<k;i++){\n//             vector<int> v;\n//             vec.push_back(v);\n//         }\n//         vector<int> sumSubSet;\n//         return partition_of_array_into_k_subset(0,nums.size(),k,0,nums,sumSubSet);\n        \n//     }\n    \n    \n    // --------------------------------------\n        bool canPartitionKSubsets(vector<int>& nums, int k) {\n        int sum = 0;\n        for(int num:nums)sum+=num;\n        if(k <= 0 || sum%k != 0)return false;\n        vector<int> visited(nums.size(), 0);\n        return canPartition(nums, visited, 0, k, 0, 0, sum/k);\n    }\n    \n    bool canPartition(vector<int>& nums, vector<int>& visited, int start_index, int k, int cur_sum, int cur_num, int target){\n        if(k==1)return true;\n        if(cur_sum>target)\n                return false;\n        if(cur_sum == target && cur_num >0 )return canPartition(nums, visited, 0, k-1, 0, 0, target);\n        for(int i = start_index; i<nums.size(); i++){\n            \n            if(!visited[i]){\n                visited[i] = 1;\n                if(canPartition(nums, visited, i+1, k, cur_sum + nums[i], cur_num++, target))return true;\n                visited[i] = 0;\n            }\n        }\n        return false;\n    }\n};"}