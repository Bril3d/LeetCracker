{"problemName":"string-compression-ii","language":"cpp","code":"class Solution {\n    const static int N = 127;\n\n    // dp[left][k] means the minimal coding size for substring \n    // s[left:] and removing at most k chars\n    int dp[N][N];\n\n    string str;\n    int n;\n\n    // get length of digit\n    inline int xs(int x) { return x == 1 ? 0 : x < 10 ? 1 : x < 100 ? 2 : 3; }\n\n    int solve(int left, int k) {\n        if(k < 0) return N;  // invalid, return INF\n        if(left >= n or n - left <= k) return 0;  // empty\n\n        int& res = dp[left][k];\n        if(res != -1) return res;\n        res = N;\n\n        int cnt[26] = {0};\n        // we try to make s[left:j] (both inculded) as one group,\n        // and all chars in this group should be the same.\n        // so we must keep the most chars in this range and remove others\n        // the range length is (j - left + 1)\n        // and the number of chars we need to remove is (j - left + 1 - most)\n        for(int j = left, most = 0; j < n; j++) {\n            most = max(most, ++cnt[str[j] - 'a']);  // most = max(count(s[left:j])\n            res = min(res, 1 + xs(most) + solve(j + 1, k - (j - left + 1 - most)));\n        }\n        return res;\n    }\npublic:\n    int getLengthOfOptimalCompression(string s, int k) {\n        memset(dp, -1, sizeof(dp));\n        str = s;\n        n = s.size();\n        return solve(0, k);\n    }\n};"}