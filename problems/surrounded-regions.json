{"problemName":"surrounded-regions","language":"cpp","code":"class Solution {\npublic:\n\n    bool check(vector<vector<char>> &board, int x, int y)\n    {\n        return (x < 0 || x >= board.size() || y < 0 || y >= board[0].size());\n    }\n    void dfs2(vector<vector<char>> &board, int x, int y)\n    {\n        vector<int> arr = {-1, 0, 1, 0, -1};\n        board[x][y] = 'X';\n        for (int i = 0; i < arr.size() - 1; i++)\n        {\n            int _x = x + arr[i], _y = y + arr[i + 1];\n            if(check(board, _x, _y))continue;\n            if(board[_x][_y] == 'X')continue;\n            dfs2(board, _x, _y);\n        }\n    }\n    bool dfs(vector<vector<char>> &board, int x, int y, vector<vector<int>> &vis)\n    {\n        vector<int> arr = {-1, 0, 1, 0, -1};\n        bool b1 = true;\n        for (int i = 0; i < arr.size() - 1; i++)\n        {\n            int _x = x + arr[i], _y = y + arr[i + 1];\n            if (check(board, _x, _y))\n            {\n                b1 = false;\n                continue;\n            }\n            if(vis[_x][_y])continue;\n            if(board[_x][_y] == 'X')continue;\n            vis[_x][_y] = 1;\n            b1 = (b1 & dfs(board, _x, _y, vis));\n        }\n        return b1;\n    }\n    void solve(vector<vector<char>> &board)\n    {\n        vector<vector<int>> vis(board.size() + 1, vector<int>(board[0].size() + 1, 0));\n        for (int i = 0; i < board.size(); i++)\n        {\n            for (int j = 0; j < board[0].size(); j++)\n            {\n                if (board[i][j] == 'O')\n                {\n                    if (vis[i][j])\n                        continue;\n                    vis[i][j] = 1;\n                    if(dfs(board, i, j, vis)){\n                        dfs2(board, i, j);\n                    }\n                }\n            }\n        }\n    }\n};"}