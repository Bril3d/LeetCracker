{"problemName":"largest-divisible-subset","language":"cpp","code":"class Solution {\npublic:\n    vector<int> largestDivisibleSubset(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        if(nums.size() == 1) {\n            return {nums[0]};\n        }\n        \n        int n = nums.size();\n        vector<int> dp(n + 1, 1);\n        int mx = 1;\n        for(int i = 1; i < n; i++) {\n            for(int j = 0; j < i; j++) {\n                if((nums[i] % nums[j]) == 0) {\n                     dp[i] = max(dp[i], dp[j] + 1);\n                    mx = max(mx, dp[i]);\n                }\n            }\n        }\n        \n        int indx = -1;\n        \n        cout << mx << endl;\n        for(int i = 0; i <n; i++) {\n            if(dp[i] == mx) {\n                indx = i;\n                break;\n            }\n        }\n        \n        vector<int> ans;\n        ans.push_back(nums[indx]);\n        mx = mx - 1;\n      int curr = indx;\n        int prev = indx - 1;\n        while(prev >= 0 and mx >= 1) {\n           if(prev >= 0 and dp[prev] == mx) {\n               if(nums[curr]%nums[prev] == 0) {\n                   ans.push_back(nums[prev]);\n                   curr = prev;\n                   prev = prev - 1;\n                   mx--;\n               }\n               else {\n                   prev--;\n               }\n           }\n            else {\n                prev--;\n            }\n        }\n        return ans;\n    }\n};"}