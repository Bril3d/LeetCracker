{"problemName":"minimized-maximum-of-products-distributed-to-any-store","language":"cpp","code":"class Solution {\npublic:\n    \n    \n    bool ispossible(vector<int> &q, int mid, int n) {\n        int i = 0;\n        \n        while(i < q.size()) {\n            n -= ceil((double) q[i] / mid);\n            i++;\n        }\n        return n >= 0;\n        \n    }\n    int minimizedMaximum(int n, vector<int>& q) {\n        int s = 1;\n        int e = *max_element(q.begin(), q.end());\n        int ans = INT_MAX;\n        while(s <= e) {\n            int mid = (s + e) >> 1;\n            \n            // cout << mid << endl;\n            if(ispossible(q, mid, n)) {\n                ans = min(ans, mid);\n               e = mid - 1;\n            }\n            else {\n                s = mid + 1;\n            }\n        }\n        return ans;\n    }\n};"}