{"problemName":"minimum-falling-path-sum-ii","language":"cpp","code":"class Solution {\npublic:\n    int helper(int day , int last , vector<vector<int>>& points,vector<vector<int>>& dp){\n        int n = points.size();\n    if(day == 0){\n        int maxi = INT_MAX;\n        for(int task = 0 ;task <n;task++){\n            if(task!=last){\n                int max_points = points[0][task];\n                maxi = min(maxi,max_points);\n            }\n        }\n        return maxi;\n    }\n    if(dp[day][last]!=-1)return dp[day][last];\n    \n    int maximum = INT_MAX;\n    for(int task = 0 ;task<n;task++){\n        if(task!=last){\n            int max_points = points[day][task]+helper(day-1 , task , points,dp);\n            maximum = min(maximum , max_points);\n        }\n    }\n    return dp[day][last] = maximum;\n}\n\nint minFallingPathSum(vector<vector<int>> &points)\n{\n    // Write your code here.\n    int n = points.size();\n    vector<vector<int>> dp(n,vector<int>(n+1,-1));\n    return helper(n-1 , n ,points,dp);\n}\n};\n\n\n"}