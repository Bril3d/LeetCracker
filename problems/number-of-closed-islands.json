{"problemName":"number-of-closed-islands","language":"cpp","code":"class Solution {\npublic:\n    vector<int> arr = {-1, 0, 1, 0, -1};\n    void dfs(vector<vector<int>> &grid, vector<vector<int>> &vis, int x, int y){\n        vis[x][y] = 1;\n        for(int i = 0; i < 4;i++){\n            int _x = x + arr[i], _y = y + arr[i + 1];\n            if(_x >=0 &&_y>=0 && _x< grid.size() && _y < grid[0].size() && !vis[_x][_y] && grid[_x][_y] == 0){\n                dfs(grid, vis, _x, _y);\n            }\n        }\n    }\n    int closedIsland(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector<vector<int>> vis(n, vector<int>(m, 0));\n        int ans = 0;\n        for(int i = 0; i < n;i++){\n            for(int j = 0; j < m;j++){\n                if(i == 0 || j == m - 1 || j == 0 || i == n - 1){\n                    if(!vis[i][j] && grid[i][j] == 0){\n                        // cout<<i<<\" \"<<j<<endl;\n                        dfs(grid, vis, i, j);\n                    }\n                }\n            }\n        }\n        for(int i = 0; i < n;i++){\n            for(int j = 0 ; j < m;j++){\n                if(!vis[i][j] && grid[i][j] == 0){\n                    ans++;\n                    dfs(grid, vis, i, j);\n                }\n            }\n        }\n        return ans;\n    }\n};"}